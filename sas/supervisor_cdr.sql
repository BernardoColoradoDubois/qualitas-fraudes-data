-- ==========================================
-- SUPERVISOR_CDR - Traducción de SAS a BigQuery SQL
-- ==========================================

-- Cruce de info entre VALUACION_BSC y APERCAB_BSC con REPORTE
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_VALUACION` AS
SELECT DISTINCT 
    t1.VALUACION,
    t1.CAUSA,
    t1.CAUSA_HOMOLOGADA,
    t2.CVE_AGENTE,
    t1.AGENTE,
    t1.OFICINA,
    t1.Oficina_Beneficiario,
    t1.GERENTE,
    t1.Director,
    t1.REF,
    t1.MO,
    t1.Importe_Reparaciones,
    t1.SUBRAMO,
    t1.Fecha_Captura
FROM `LAN_VERIFICACIONES.VALUACION_BSC` t1
LEFT JOIN `LAN_VERIFICACIONES.APERCAB_BSC` t2 
    ON t1.REPORTE = t2.REPORTE;

-- Cruce entre ANALISTACDR y ASIGNACIONCDR con IDANALISTACDR donde CLAVEANALISTA contenga 'SUPQ'
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.SUPERVISOR_SERVICIO` AS
SELECT DISTINCT 
    t1.CLAVEANALISTA AS CLAVEANALISTA_SUPSERV,
    t1.NOMBRENNALISTA AS NOMBRE_SUPERSERV,
    t2.CLAVETALLER,
    t2.CODVALUADOR,
    t1.IDREGIONGEOGRAFICA
FROM `LAN_VERIFICACIONES.ANALISTACDR` t1
INNER JOIN `LAN_VERIFICACIONES.ASIGNACIONCDR` t2 
    ON t1.IDANALISTACDR = t2.IDANALISTACDR
WHERE t1.CLAVEANALISTA LIKE '%SUPQ%'
ORDER BY t1.CLAVEANALISTA, t2.CLAVETALLER;

-- Extracción de TCAUSA_BSC cuando la CAUSA_HOMOLOGADA no es DESCONOCIDA
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.CODIGO_CAUSA` AS
SELECT DISTINCT 
    t1.Z_ID,
    t1.CAUSA,
    t1.CAUSA_HOMOLOGADA
FROM `LAN_VERIFICACIONES.TCAUSA_BSC` t1
WHERE t1.CAUSA_HOMOLOGADA <> 'DESCONOCIDA';

-- Extracción de los distintos conceptos de COSTO
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.Conceptos` AS
SELECT DISTINCT 
    t1.CONCEPTO
FROM `LAN_VERIFICACIONES.COSTO` t1
WHERE t1.CONCEPTO IS NOT NULL;

-- Suma de los montos agrupados por IDEXPEDIENTE y CONCEPTO de COSTO
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.BuscaMontosPortal_Inicial` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.CONCEPTO,
    SUM(t1.MONTO) AS SUM_of_MONTO
FROM `LAN_VERIFICACIONES.COSTO` t1
GROUP BY t1.IDEXPEDIENTE, t1.CONCEPTO;

-- Extracción de distintos IDEXPEDIENTE, DESCRIPCION de COSTO
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.REAL_CE` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE,
    t1.DESCRIPCION
FROM `LAN_VERIFICACIONES.COSTO` t1
WHERE t1.DESCRIPCION = 'COSTO_POR_MOB_CARRIL_EXP' 
    AND t1.IDEXPEDIENTE IS NOT NULL;

-- Suma de los montos agrupados por IDEXPEDIENTE y CONCEPTO de COMPLEMENTO
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.BuscaMontosPortal_Complemento` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.CONCEPTO,
    SUM(t1.MONTO) AS SUM_of_MONTO
FROM `LAN_VERIFICACIONES.COMPLEMENTO` t1
GROUP BY t1.IDEXPEDIENTE, t1.CONCEPTO;

-- Fecha máxima de FECHAPROMESAREAL y FECHAACTUALIZACION_FPR de FECHAPROMESAREALANLCDR
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_FECHAPROMESAREALANLCDR` AS
SELECT 
    t1.IDEXPEDIENTE,
    MAX(t1.FECHAPROMESAREAL) AS MAX_of_FECHAPROMESAREAL,
    MAX(t1.FECHAACTUALIZACION_FPR) AS MAX_of_FECHAACTUALIZACION_FPR
FROM `LAN_VERIFICACIONES.FECHAPROMESAREALANLCDR` t1
GROUP BY t1.IDEXPEDIENTE
ORDER BY t1.IDEXPEDIENTE;

-- Extracción de distintos IDEXPEDIENTE de HISTOINVESTIGACION
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.ExtraeExpedientesINVEST` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE
FROM `LAN_VERIFICACIONES.HISTOINVESTIGACION` t1;

-- Cruce de info entre Prestadores, tipoProveedor y TESTADO_BSC
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.Prestadores` AS
SELECT 
    t1.Id AS CLAVETALLER,
    t3.EDOPOB AS Pob_Comer,
    t1.Marca AS MarcaCDR,
    t1.Nombre AS NombreCDR,
    t2.tipo_proveedor AS TipoCDR,
    t1.Nom_Comer AS Nom_CDR_Comer
FROM `LAN_VERIFICACIONES.PRESTADORES` t1
INNER JOIN `LAN_VERIFICACIONES.TIPOPROVEEDOR` t2 
    ON t1.Tipo = t2.id
LEFT JOIN `LAN_VERIFICACIONES.TESTADO_BSC` t3 
    ON t1.POBCOMER = t3.Z_ID;

-- Máxima IDHISTORICOTERMINOENTREGA por IDEXPEDIENTE cuando TIPOFECHA esté en AUTORIZA VAL. NO REPARACION
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.REP_NO_AUT` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE,
    MAX(t1.IDHISTORICOTERMINOENTREGA) AS MAX_of_IDHISTORICOTERMINOENTREGA
FROM `LAN_VERIFICACIONES.HISTORICOTERMINOENTREGA` t1
WHERE t1.TIPOFECHA IN ('AUTORIZA VAL. NO REPARACION')
GROUP BY t1.IDEXPEDIENTE;

-- Máxima IDHISTORICOTERMINOENTREGA por IDEXPEDIENTE cuando TIPOFECHA esté en complementos
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.MAX_ID_EXP` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE,
    MAX(t1.IDHISTORICOTERMINOENTREGA) AS MAX_of_IDHISTORICOTERMINOENTREGA
FROM `LAN_VERIFICACIONES.HISTORICOTERMINOENTREGA` t1
WHERE t1.TIPOFECHA IN (
    'ENVIO COMPLEMENTO TALLER VALUADOR',
    'ENVIO COMPLEMENTO ADMINISTRATIVO VALUADOR'
)
GROUP BY t1.IDEXPEDIENTE;

-- Mínima FECHA por IDEXPEDIENTE cuando TIPOFECHA esté en 'ENTREGA', 'ENTREGA UNIDAD'
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.MIN_FEC_ENTREGA` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE,
    MIN(t1.FECHA) AS MIN_of_FECHA
FROM `LAN_VERIFICACIONES.HISTORICOTERMINOENTREGA` t1
WHERE t1.TIPOFECHA IN ('ENTREGA', 'ENTREGA UNIDAD')
GROUP BY t1.IDEXPEDIENTE;

-- Query para HISTORICOTERMINOENTREGA con TERMINO
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_HISTORICOTERMINOENTREG` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE,
    MIN(t1.FECHA) AS MIN_of_FECHA,
    COUNT(t1.IDHISTORICOTERMINOENTREGA) AS COUNT_of_IDHISTORICOTERMINOENTRE
FROM `LAN_VERIFICACIONES.HISTORICOTERMINOENTREGA` t1
WHERE t1.TIPOFECHA IN ('TERMINO', 'TERMINO UNIDAD')
GROUP BY t1.IDEXPEDIENTE
ORDER BY t1.IDEXPEDIENTE;

-- Conteo mayores a 1 de expedientes dependiendo de TIPOFECHA
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_HISTORICOTERMINOE_0001` AS
SELECT 
    t1.IDEXPEDIENTE,
    COUNT(t1.IDEXPEDIENTE) AS COUNT_of_IDEXPEDIENTE
FROM `LAN_VERIFICACIONES.HISTORICOTERMINOENTREGA` t1
WHERE t1.TIPOFECHA IN ('TERMINO UNIDAD', 'TERMINO')
GROUP BY t1.IDEXPEDIENTE
HAVING COUNT(t1.IDEXPEDIENTE) > 1
ORDER BY t1.IDEXPEDIENTE;

-- Mínima fecha por IDEXPEDIENTE cuando TIPOFECHA es 'ENTREGA UNIDAD','ENTREGA'
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.MIN_ENTREGA` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE,
    MIN(t1.FECHA) AS MIN_of_FECHA,
    COUNT(t1.IDHISTORICOTERMINOENTREGA) AS COUNT_of_IDHISTORICOTERMINOENTRE
FROM `LAN_VERIFICACIONES.HISTORICOTERMINOENTREGA` t1
WHERE t1.TIPOFECHA IN ('ENTREGA UNIDAD', 'ENTREGA')
GROUP BY t1.IDEXPEDIENTE
ORDER BY t1.IDEXPEDIENTE;

-- Cruce de información entre TALLERES y ESTADO, RELACIONCDR_SICDR y SUPERVISORINTEGRAL
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TALLERES` AS
SELECT 
    t1.CLAVETALLER,
    t1.TIPO AS TipoCDR_Portal,
    t2.NOMBRE AS EstadoCDR,
    t2.IDREGIONGEOGRAFICA AS RegionValuacion,
    t4.CLAVESUPERVISOR,
    t4.NOMBRESUPERVISOR AS NOMBRENNALISTA
FROM `LAN_VERIFICACIONES.TALLERES` t1
LEFT JOIN `LAN_VERIFICACIONES.ESTADO` t2 
    ON t1.IDESTADO = t2.IDESTADO
LEFT JOIN `LAN_VERIFICACIONES.RELACIONCDR_SICDR` t3 
    ON t1.CLAVETALLER = t3.CLAVETALLER
LEFT JOIN `LAN_VERIFICACIONES.SUPERVISORINTEGRAL` t4 
    ON t3.IDSICDR = t4.IDSUPERVISORINTEGRAL;

-- Identificación de Tránsito
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.Transito` AS
SELECT 
    t1.IDEXPEDIENTE,
    1 AS Transito
FROM `LAN_VERIFICACIONES.DATOSGENERALES` t1,
     `LAN_VERIFICACIONES.ESTATUS` t2,
     `LAN_VERIFICACIONES.ESTATUSEXPEDIENTES` t3,
     `LAN_VERIFICACIONES.TALLERES` t4,
     `LAN_VERIFICACIONES.ESTADO` t5
WHERE t1.IDEXPEDIENTE = t2.IDEXPEDIENTE 
    AND t2.IDESTATUSEXPEDIENTE = t3.IDESTATUSEXPEDIENTE 
    AND t1.CLAVETALLER = t4.CLAVETALLER 
    AND t4.IDESTADO = t5.IDESTADO
    AND t2.TRANSITO = 1 
    AND t2.PISO = 0 
    AND t2.IDESTATUSEXPEDIENTE IN (
        '02', '03', '05', '10', '04', '06', '07', '09', '11',
        '21', '22', '23', '28', '30'
    );

-- Identificar lo pendiente de tránsito
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.PENDIENTE_TRANSITO` AS
SELECT 
    t1.IDEXPEDIENTE,
    1 AS Transito
FROM `LAN_VERIFICACIONES.DATOSGENERALES` t1,
     `LAN_VERIFICACIONES.ESTATUS` t2,
     `LAN_VERIFICACIONES.ESTATUSEXPEDIENTES` t3,
     `LAN_VERIFICACIONES.TALLERES` t4,
     `LAN_VERIFICACIONES.ESTADO` t5
WHERE t1.IDEXPEDIENTE = t2.IDEXPEDIENTE 
    AND t2.IDESTATUSEXPEDIENTE = t3.IDESTATUSEXPEDIENTE 
    AND t1.CLAVETALLER = t4.CLAVETALLER 
    AND t4.IDESTADO = t5.IDESTADO
    AND t2.TRANSITO = 1 
    AND t2.PISO = 0 
    AND t2.IDESTATUSEXPEDIENTE IN ('32');

-- Identificación de Piso
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.Piso` AS
SELECT 
    t1.IDEXPEDIENTE,
    1 AS Piso
FROM `LAN_VERIFICACIONES.DATOSGENERALES` t1,
     `LAN_VERIFICACIONES.ESTATUS` t2,
     `LAN_VERIFICACIONES.ESTATUSEXPEDIENTES` t3,
     `LAN_VERIFICACIONES.TALLERES` t4,
     `LAN_VERIFICACIONES.ESTADO` t5
WHERE t1.IDEXPEDIENTE = t2.IDEXPEDIENTE 
    AND t2.IDESTATUSEXPEDIENTE = t3.IDESTATUSEXPEDIENTE 
    AND t1.CLAVETALLER = t4.CLAVETALLER 
    AND t4.IDESTADO = t5.IDESTADO
    AND t2.IDESTATUSEXPEDIENTE IN (
        '02', '03', '05', '08', '10', '04', '06', '07', '09', '11',
        '21', '23', '28'
    )
    AND t2.PISO = 1;

-- Cruce de información entre DATOSGENERALES y TALLERES, VALE y VALEHISTORICO cuando el ejercicio sea mayor o igual al 21
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.PZA` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.IDVALUACION,
    t1.CLAVETALLER,
    t2.COTIZADOR AS CDRCOTIZADOR,
    t2.FRONTERIZO AS CDRAUTOSURTIDO,
    t3.FECHAEXPEDICION,
    t3.FECHAACTUALIZACION,
    t3.IDVALEESTATUS,
    t4.FECENVIO,
    t4.FECENTREGAREFACCIONARIA,
    t4.FECRECEPCION,
    t4.NUMPARTE,
    t4.REFERENCIA,
    t4.DESCRIPCION,
    CONCAT(
        CAST(t1.IDEXPEDIENTE AS STRING),
        COALESCE(TRIM(t4.REFERENCIA), ''),
        COALESCE(TRIM(t4.NUMPARTE), ''),
        COALESCE(TRIM(t4.DESCRIPCION), '')
    ) AS LLAVEPIEZA
FROM `LAN_VERIFICACIONES.DATOSGENERALES` t1
LEFT JOIN `LAN_VERIFICACIONES.TALLERES` t2 
    ON t1.CLAVETALLER = t2.CLAVETALLER
INNER JOIN `LAN_VERIFICACIONES.VALE` t3 
    ON t1.IDEXPEDIENTE = t3.IDEXPEDIENTE
INNER JOIN `LAN_VERIFICACIONES.VALEHISTORICO` t4 
    ON t3.IDVALE = t4.IDVALE
WHERE t1.EJERCICIO >= '21';

-- Inner entre DATOSGENERALES y ESTATUS
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.Asignado` AS
SELECT 
    t1.IDEXPEDIENTE,
    1 AS Asignado
FROM `LAN_VERIFICACIONES.DATOSGENERALES` t1
INNER JOIN `LAN_VERIFICACIONES.ESTATUS` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE
WHERE t2.IDESTATUSEXPEDIENTE = '01';

-- Cruce entre DATOSVEHICULO y COLOR, UNIDAD y MARCA
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.DATOSVEHICULO` AS
SELECT 
    t1.IDEXPEDIENTE,
    t2.DESCRIPCION AS Color,
    t3.DESCRIPCION AS UNIDAD,
    t4.DESCRIPCION AS Marca_Vehiculo,
    t1.TIPO,
    t1.MODELO,
    t1.PLACAS,
    t1.SERIE
FROM `LAN_VERIFICACIONES.DATOSVEHICULO` t1
LEFT JOIN `LAN_VERIFICACIONES.COLOR` t2 
    ON t1.IDCOLOR = t2.IDCOLOR
LEFT JOIN `LAN_VERIFICACIONES.UNIDAD` t3 
    ON t1.IDUNIDAD = t3.IDUNIDAD
LEFT JOIN `LAN_VERIFICACIONES.MARCA` t4 
    ON t1.IDMARCA = t4.IDMARCA;

-- Mínimo de FECHAENVIOTALLER de ENVIOHISTORICO
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_ENVIOHISTORICO` AS
SELECT 
    t1.IDEXPEDIENTE,
    MIN(t1.FECHAENVIOTALLER) AS MIN_of_FECHAENVIOTALLER
FROM `LAN_VERIFICACIONES.ENVIOHISTORICO` t1
WHERE t1.FECHAENVIOTALLER IS NOT NULL 
    AND t1.IDEXPEDIENTE IS NOT NULL
GROUP BY t1.IDEXPEDIENTE
ORDER BY t1.IDEXPEDIENTE;

-- Mínimo de FECHAAUTORIZACIONVALUADOR de ENVIOHISTORICO
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_ENVIOHISTORICO_0000` AS
SELECT 
    t1.IDEXPEDIENTE,
    MIN(t1.FECHAAUTORIZACIONVALUADOR) AS MIN_of_FECHAAUTORIZACIONVALUADOR
FROM `LAN_VERIFICACIONES.ENVIOHISTORICO` t1
WHERE t1.IDEXPEDIENTE IS NOT NULL
GROUP BY t1.IDEXPEDIENTE;

-- Conteo del mínimo de FECHAAUTORIZACIONVALUADOR ENVIOHISTORICO cuando el IDEXPEDIENTE no es null
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_ENVIOHISTORICO_0001` AS
SELECT 
    t1.IDEXPEDIENTE,
    COUNT(DISTINCT t1.FECHAAUTORIZACIONVALUADOR) AS COUNT_DISTINCT_of_FECHAAUTORIZAC
FROM `LAN_VERIFICACIONES.ENVIOHISTORICO` t1
WHERE t1.IDEXPEDIENTE IS NOT NULL
GROUP BY t1.IDEXPEDIENTE;

-- Máximo FECHAENVIOTALLER de ENVIOHISTORICO donde FECHAENVIOTALLER no es missing y IDEXPEDIENTE no es vacío
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_ENVIOHISTORICO_0002` AS
SELECT 
    t1.IDEXPEDIENTE,
    MAX(t1.FECHAENVIOTALLER) AS MAX_of_FECHAENVIOTALLER
FROM `LAN_VERIFICACIONES.ENVIOHISTORICO` t1
WHERE t1.FECHAENVIOTALLER IS NOT NULL 
    AND t1.IDEXPEDIENTE IS NOT NULL
GROUP BY t1.IDEXPEDIENTE;

-- Máximo FECHAAUTORIZACIONVALUADOR de ENVIOHISTORICO donde FECHAAUTORIZACIONVALUADOR no es missing y IDEXPEDIENTE no es vacío
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_ENVIOHISTORICO_0003` AS
SELECT 
    t1.IDEXPEDIENTE,
    MAX(t1.FECHAAUTORIZACIONVALUADOR) AS MAX_of_FECHAAUTORIZACIONVALUADOR
FROM `LAN_VERIFICACIONES.ENVIOHISTORICO` t1
WHERE t1.FECHAAUTORIZACIONVALUADOR IS NOT NULL 
    AND t1.IDEXPEDIENTE IS NOT NULL
GROUP BY t1.IDEXPEDIENTE;

-- Selecciona expedientes con cálculos de tiempo (conversión de funciones SAS INTCK)
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.SeleccionaExpedientes` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.FECHAENVIOTALLER,
    t1.FECHAASIGNACIONVALUADOR,
    t1.FECHAAUTORIZACIONVALUADOR,
    -- HORAS_VALUACION: diferencia en horas entre envío taller y autorización valuador
    DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t1.FECHAENVIOTALLER, HOUR) AS HORAS_VALUACION,
    -- HORAS_VALUADOR: diferencia en horas entre asignación y autorización valuador
    DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t1.FECHAASIGNACIONVALUADOR, HOUR) AS HORAS_VALUADOR,
    -- HORAS_CARRUSEL: diferencia en horas entre envío taller y asignación valuador
    DATETIME_DIFF(t1.FECHAASIGNACIONVALUADOR, t1.FECHAENVIOTALLER, HOUR) AS HORAS_CARRUSEL,
    -- expValido
    CASE 
        WHEN DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t1.FECHAENVIOTALLER, HOUR) IS NULL 
             OR DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t1.FECHAENVIOTALLER, SECOND)/60 < -300
             OR DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t1.FECHAASIGNACIONVALUADOR, HOUR) IS NULL 
             OR DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t1.FECHAASIGNACIONVALUADOR, SECOND)/60 < -300
             OR DATETIME_DIFF(t1.FECHAASIGNACIONVALUADOR, t1.FECHAENVIOTALLER, HOUR) IS NULL
        THEN 0 
        ELSE 1
    END AS expValido,
    -- tipoDesvío
    CASE 
        WHEN DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t1.FECHAENVIOTALLER, HOUR) IS NULL 
             OR DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t1.FECHAENVIOTALLER, SECOND)/60 < -300 
        THEN 'EnvíoAutorizaciónInválido'
        WHEN DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t1.FECHAASIGNACIONVALUADOR, HOUR) IS NULL 
             OR DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t1.FECHAASIGNACIONVALUADOR, SECOND)/60 < -300 
        THEN 'CarruselAutorizaciónInválido'
        WHEN DATETIME_DIFF(t1.FECHAASIGNACIONVALUADOR, t1.FECHAENVIOTALLER, HOUR) IS NULL 
        THEN 'EnvíoCarruselInválido'
        ELSE ''
    END AS tipoDesvio
FROM `LAN_VERIFICACIONES.ENVIOHISTORICO` t1
WHERE t1.IDEXPEDIENTE IS NOT NULL
ORDER BY t1.IDEXPEDIENTE, t1.FECHAENVIOTALLER;

-- Únicos IDEXPEDIENTE de SeleccionaExpedientes cuando expValido=0
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.SeparaDesviaciones` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE
FROM `STG_PREVENCION_FRAUDES.SeleccionaExpedientes` t1
WHERE t1.expValido = 0;

-- Cruce entre SeleccionaExpedientes y SeparaDesviaciones por IDEXPEDIENTE
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.Envios` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.FECHAENVIOTALLER,
    CASE 
        WHEN t1.IDEXPEDIENTE <> t2.IDEXPEDIENTE OR t2.IDEXPEDIENTE IS NULL THEN 1 
        ELSE 0 
    END AS ExpedienteValidoTiempos
FROM `STG_PREVENCION_FRAUDES.SeleccionaExpedientes` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.SeparaDesviaciones` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE;

-- Cruce entre SeleccionaExpedientes y SeparaDesviaciones por IDEXPEDIENTE
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.Autorizaciones` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.FECHAAUTORIZACIONVALUADOR
FROM `STG_PREVENCION_FRAUDES.SeleccionaExpedientes` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.SeparaDesviaciones` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE;

-- Creación de tabla Carrusel (necesaria para los próximos pasos)
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.Carrusel` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.FECHAASIGNACIONVALUADOR
FROM `STG_PREVENCION_FRAUDES.SeleccionaExpedientes` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.SeparaDesviaciones` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE;

-- Simulación de data steps con ROW_NUMBER() para enumerar
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.EnumeraEnvios` AS
SELECT 
    *,
    ROW_NUMBER() OVER (PARTITION BY IDEXPEDIENTE ORDER BY FECHAENVIOTALLER) - 1 AS CT
FROM `STG_PREVENCION_FRAUDES.Envios`;

CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.EnumeraCarrusel` AS
SELECT 
    *,
    ROW_NUMBER() OVER (PARTITION BY IDEXPEDIENTE ORDER BY FECHAASIGNACIONVALUADOR) AS CT
FROM `STG_PREVENCION_FRAUDES.Carrusel`;

CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.EnumeraEnvios_1` AS
SELECT 
    *,
    ROW_NUMBER() OVER (PARTITION BY IDEXPEDIENTE ORDER BY FECHAENVIOTALLER) AS CT
FROM `STG_PREVENCION_FRAUDES.Envios`;

CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.EnumeraAutorizaciones` AS
SELECT 
    *,
    ROW_NUMBER() OVER (PARTITION BY IDEXPEDIENTE ORDER BY FECHAAUTORIZACIONVALUADOR) AS CT
FROM `STG_PREVENCION_FRAUDES.Autorizaciones`;

-- Inner join entre EnumeraAutorizaciones y EnumeraEnvios
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.EvaluaTiempoTaller` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.FECHAAUTORIZACIONVALUADOR AS autorizacionVal_i_1,
    t2.FECHAENVIOTALLER,
    DATETIME_DIFF(t2.FECHAENVIOTALLER, t1.FECHAAUTORIZACIONVALUADOR, HOUR) AS HORAS_CDR,
    CASE 
        WHEN DATETIME_DIFF(t2.FECHAENVIOTALLER, t1.FECHAAUTORIZACIONVALUADOR, HOUR) < -0.1 THEN 0 
        ELSE 1 
    END AS expValido
FROM `STG_PREVENCION_FRAUDES.EnumeraAutorizaciones` t1
INNER JOIN `STG_PREVENCION_FRAUDES.EnumeraEnvios` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE 
    AND t1.ct = t2.CT;

-- Inner join entre EnumeraEnvios_1 y EnumeraCarrusel
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TiempoPrimerCarrusel` AS
SELECT 
    t1.IDEXPEDIENTE,
    t2.FECHAASIGNACIONVALUADOR,
    DATETIME_DIFF(t2.FECHAASIGNACIONVALUADOR, t1.FECHAENVIOTALLER, HOUR) AS TiempoPrimerCarrusel
FROM `STG_PREVENCION_FRAUDES.EnumeraEnvios_1` t1
INNER JOIN `STG_PREVENCION_FRAUDES.EnumeraCarrusel` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE 
    AND t1.CT = t2.ct
WHERE t1.CT = 1
ORDER BY t1.IDEXPEDIENTE;

-- Inner entre EnumeraEnvios_1 y EnumeraCarrusel y creación de TiempoCarruselComplementos
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TiempoCarruselComplementos` AS
SELECT 
    t1.IDEXPEDIENTE,
    DATETIME_DIFF(t2.FECHAASIGNACIONVALUADOR, t1.FECHAENVIOTALLER, HOUR) AS TiempoCarruselComplementos
FROM `STG_PREVENCION_FRAUDES.EnumeraEnvios_1` t1
INNER JOIN `STG_PREVENCION_FRAUDES.EnumeraCarrusel` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE 
    AND t1.CT = t2.ct
WHERE t1.CT > 1
ORDER BY t1.IDEXPEDIENTE;

-- Inner entre EnumeraAutorizaciones y EnumeraEnvios_1 y creación de TiempoAutorizacionComplementos
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TiempoValuacionComplementos` AS
SELECT 
    t1.IDEXPEDIENTE,
    SUM(DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t2.FECHAENVIOTALLER, HOUR)) AS TiempoAutorizacionComplementos
FROM `STG_PREVENCION_FRAUDES.EnumeraAutorizaciones` t1
INNER JOIN `STG_PREVENCION_FRAUDES.EnumeraEnvios_1` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE 
    AND t1.ct = t2.CT
WHERE t1.ct > 1
GROUP BY t1.IDEXPEDIENTE
ORDER BY t1.IDEXPEDIENTE;

-- Inner entre EnumeraAutorizaciones y EnumeraEnvios_1 y creación de TiempoPrimeraAutorizacion
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TiempoPrimeraValuacion` AS
SELECT 
    t1.IDEXPEDIENTE,
    DATETIME_DIFF(t1.FECHAAUTORIZACIONVALUADOR, t2.FECHAENVIOTALLER, HOUR) AS TiempoPrimeraAutorizacion
FROM `STG_PREVENCION_FRAUDES.EnumeraAutorizaciones` t1
INNER JOIN `STG_PREVENCION_FRAUDES.EnumeraEnvios_1` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE 
    AND t1.ct = t2.CT
WHERE t1.ct = 1
ORDER BY t1.IDEXPEDIENTE;

-- Máximo de envíos por expediente
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.CuentaEnvios` AS
SELECT 
    t1.IDEXPEDIENTE,
    MAX(t1.CT) AS ENVIOS
FROM `STG_PREVENCION_FRAUDES.EnumeraEnvios_1` t1
GROUP BY t1.IDEXPEDIENTE;

-- IDEXPEDIENTE únicos cuando expValido = 0
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.IdentificaDesviaciones` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE
FROM `STG_PREVENCION_FRAUDES.EvaluaTiempoTaller` t1
WHERE t1.expValido = 0;

-- Suma de TiempoCarruselComplementos por IDEXPEDIENTE
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.ConsolidaTiemposCarruselComp` AS
SELECT 
    t1.IDEXPEDIENTE,
    SUM(t1.TiempoCarruselComplementos) AS tiempoCarrComp
FROM `STG_PREVENCION_FRAUDES.TiempoCarruselComplementos` t1
GROUP BY t1.IDEXPEDIENTE;

-- Cruce entre TiempoPrimeraValuacion y TiempoValuacionComplementos
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TiempoTotalValuacion` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.TiempoPrimeraAutorizacion,
    t3.TiempoAutorizacionComplementos,
    COALESCE(t1.TiempoPrimeraAutorizacion, 0) + COALESCE(t3.TiempoAutorizacionComplementos, 0) AS tiempoTotalAutorizacion
FROM `STG_PREVENCION_FRAUDES.TiempoPrimeraValuacion` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.TiempoValuacionComplementos` t3 
    ON t1.IDEXPEDIENTE = t3.IDEXPEDIENTE;

-- Creación de horasTallerComplementos
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TiempoTallerComplementos` AS
SELECT 
    t2.IDEXPEDIENTE,
    SUM(t2.horas_cdr) AS horasTallerComplementos,
    CASE 
        WHEN t1.IDEXPEDIENTE = t2.IDEXPEDIENTE THEN 0 
        ELSE 1 
    END AS expValido
FROM `STG_PREVENCION_FRAUDES.IdentificaDesviaciones` t1
RIGHT JOIN `STG_PREVENCION_FRAUDES.EvaluaTiempoTaller` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE
GROUP BY t2.IDEXPEDIENTE, t1.IDEXPEDIENTE;

-- Creación de tiempoTotalCarrusel
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TiempoTotalCarrusel` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.FECHAASIGNACIONVALUADOR AS FEC_PRIMERA_ASIG_CARR,
    t1.TiempoPrimerCarrusel,
    t2.tiempoCarrComp,
    COALESCE(t1.TiempoPrimerCarrusel, 0) + COALESCE(t2.tiempoCarrComp, 0) AS tiempoTotalCarrusel
FROM `STG_PREVENCION_FRAUDES.TiempoPrimerCarrusel` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.ConsolidaTiemposCarruselComp` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE;

-- Mínimo en FECHAENVIOTALLER por IDEXPEDIENTE y ExpedienteValidoTiempos
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.MinimoEnvioCDR` AS
SELECT 
    t1.IDEXPEDIENTE,
    MIN(t1.FECHAENVIOTALLER) AS MIN_of_FECHAENVIOTALLER,
    t1.ExpedienteValidoTiempos
FROM `STG_PREVENCION_FRAUDES.Envios` t1
GROUP BY t1.IDEXPEDIENTE, t1.ExpedienteValidoTiempos;

-- Query principal para DATOSGENERALES
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_DATOSGENERALES` AS
SELECT 
    t1.IDEXPEDIENTE AS idExp,
    SUBSTR(t26.NUMEXPEDIENTE, 1, 14) AS VALUACION,
    t1.EJERCICIO AS Ejercicio,
    t1.NUMREPORTE AS Reporte,
    t1.NUMSINIESTRO AS Siniestro,
    t1.CODAFECTADO,
    t1.CODIGOASEGURADO,
    t1.TIPORIESGO,
    t1.NUMPOLIZA,
    t1.NUMENDOSO,
    t1.NUMINCISO,
    t28.Marca_Vehiculo AS MarcaVehiculo,
    t28.TIPO,
    t28.MODELO,
    t28.Color,
    t28.PLACAS,
    t28.SERIE,
    t28.UNIDAD,
    t1.NOMCONDUCTOR,
    ' ' AS CLIENTE,
    ' ' AS OFICINA,
    ' ' AS GRUPO_NEGOCIO,
    t1.PRESUPUESTOMOB,
    t1.PIEZASCAMBIO,
    t1.SUMAASEG AS SUMAASEG_DG,
    t1.MONTODEDUCIBLE AS MONTODEDUCIBLE_DG,
    t4.TRANSITO,
    t4.PISO,
    CASE 
        WHEN t4.IDESTATUSEXPEDIENTE IN ('02', '03', '05', '10', '04','06', '07', '09', '11', '21', '22' ,  '28', '32', '30') 
             AND t4.PISO = 0 AND t4.TRANSITO = 1 
        THEN 1 
        ELSE 0 
    END AS Transito_Activo,
    CASE 
        WHEN t4.IDESTATUSEXPEDIENTE IN ('02', '03', '05', '08', '10', '04', '06', '07', '09', '11', '21', '22', '23', '28', '31') 
             AND t4.PISO = 1 
        THEN 1 
        ELSE 0 
    END AS Piso_Activo,
    t4.GRUA,
    t1.CLAVETALLER,
    t12.Pob_Comer,
    t12.MarcaCDR,
    t12.NombreCDR,
    t12.Nom_CDR_Comer,
    t12.TipoCDR,
    t1.CODVALUADOR,
    t16.NOMBRE AS CatValuador,
    t1.ORIGEN AS HerramientaValuacion,
    t8.DESCRIPCION AS EstatusValuacion,
    CASE 
        WHEN t1.codvaluador IS NOT NULL 
        THEN CASE WHEN t2.equipopesado = 1 THEN 'EP' ELSE 'AUTOS' END
        ELSE 'SIN VALUADOR'
    END AS TipoValuador,
    CASE 
        WHEN t5.idestatusexpediente IN ('02','03','05','08','10','04','06','07','09','11','16','17','21','22','23','28','30') 
             AND t4.piso = 1 THEN 'PISO'
        WHEN t5.idestatusexpediente IN ('02','03','05','08','10','04','06','07','09','11','16','17','28','30') 
             AND t4.transito = 1 AND t4.piso = 0 THEN 'TRANSITO'
        ELSE 'SIN BANDEJA'
    END AS Bandeja,
    t3.FECASIGNACION,
    t3.FECADJUDICACION,
    t9.MIN_of_FECHAENVIOTALLER AS FECENVIO,
    t3.FECVALUACION,
    t3.FECINGRESO,
    t21.MIN_of_FECHA AS PRIMERTERMINO,
    t13.MIN_of_FECHA AS PRIMERENTREGA,
    t3.FECTERMINADO,
    t3.FECENTREGADO,
    t3.FECPROMESA,
    t3.FECHAESTENT,
    DATE_DIFF(DATE(t3.FECTERMINADO), DATE(t21.MIN_of_FECHA), DAY) AS DIFDIASTERMINO,
    t3.DIASREPARACION AS DiasReparacion,
    t5.DESCRIPCION AS EstatusExpediente,
    CASE 
        WHEN t9.min_of_fechaenviotaller IS NOT NULL
        THEN DATE_DIFF(DATE(t9.MIN_of_FECHAENVIOTALLER), DATE(t3.fecadjudicacion), DAY)
        ELSE DATE_DIFF(DATE(CURRENT_DATETIME()), DATE(t3.fecadjudicacion), DAY)
    END AS DiasEnv,
    t27.RegionValuacion,
    t27.EstadoCDR,
    t27.CLAVESUPERVISOR,
    t27.NOMBRENNALISTA,
    t27.TipoCDR_Portal,
    CASE WHEN t17.COUNT_DISTINCT_of_FECHAAUTORIZAC > 1 THEN 1 ELSE 0 END AS Complemento,
    t18.MAX_of_FECHAENVIOTALLER AS UltimoEnvioCDR,
    t14.MIN_of_FECHAAUTORIZACIONVALUADOR AS PrimeraAutorizacion,
    t19.MAX_of_FECHAAUTORIZACIONVALUADOR AS UltimaAutorizacion,
    DATE_DIFF(DATE(t19.MAX_of_FECHAAUTORIZACIONVALUADOR), DATE(t18.MAX_of_FECHAENVIOTALLER), DAY) AS DiasDifEnvioAutorizacion,
    CASE WHEN t19.MAX_of_FECHAAUTORIZACIONVALUADOR > t18.MAX_of_FECHAENVIOTALLER THEN 1 ELSE 0 END AS FecAutMayor,
    CASE WHEN t1.IDEXPEDIENTE = t22.IDEXPEDIENTE THEN 1 ELSE 0 END AS CAMBIOTERMINO,
    CASE WHEN t3.FECENTREGADO IS NOT NULL THEN 1 ELSE 0 END AS VehEntregado,
    -- Lógica de TablaSupervisor adaptada para BigQuery
    CASE 
        WHEN EXTRACT(MONTH FROM CURRENT_DATE()) = 1 THEN
            CASE WHEN EXTRACT(YEAR FROM DATE(t3.FECTERMINADO)) = EXTRACT(YEAR FROM CURRENT_DATE()) - 1 
                      AND EXTRACT(MONTH FROM DATE(t3.FECTERMINADO)) = 11 THEN 1 ELSE 0 END
        WHEN EXTRACT(MONTH FROM CURRENT_DATE()) = 2 THEN
            CASE WHEN EXTRACT(YEAR FROM DATE(t3.FECTERMINADO)) = EXTRACT(YEAR FROM CURRENT_DATE()) - 1 
                      AND EXTRACT(MONTH FROM DATE(t3.FECTERMINADO)) = 12 THEN 1 ELSE 0 END
        ELSE
            CASE WHEN EXTRACT(YEAR FROM DATE(t3.FECTERMINADO)) = EXTRACT(YEAR FROM CURRENT_DATE()) 
                      AND EXTRACT(MONTH FROM DATE(t3.FECTERMINADO)) = EXTRACT(MONTH FROM CURRENT_DATE()) - 2 THEN 1 ELSE 0 END
    END AS TablaSupervisor,
    CASE WHEN t4.HISTOSINSINIESTRO IS NOT NULL THEN 1 ELSE 0 END AS SinSiniestro,
    t1.AGENTE,
    t1.OFIEMICODIGO,
    t1.OFIEMIDESCRIP,
    t6.Z_ID AS CAUSACODIGO,
    t6.CAUSA AS CAUSADESCRIP,
    t1.SUBRAMO
FROM `LAN_VERIFICACIONES.DATOSGENERALES` t1
LEFT JOIN `LAN_VERIFICACIONES.VALUADOR` t2 ON t1.CODVALUADOR = t2.CODVALUADOR
LEFT JOIN `LAN_VERIFICACIONES.FECHAS` t3 ON t1.IDEXPEDIENTE = t3.IDEXPEDIENTE
LEFT JOIN `LAN_VERIFICACIONES.ESTATUS` t4 ON t1.IDEXPEDIENTE = t4.IDEXPEDIENTE
LEFT JOIN `LAN_VERIFICACIONES.ESTATUSEXPEDIENTES` t5 ON t4.IDESTATUSEXPEDIENTE = t5.IDESTATUSEXPEDIENTE
LEFT JOIN `LAN_VERIFICACIONES.VALUACION` t8 ON t1.IDVALUACION = t8.IDVALUACION
LEFT JOIN `STG_PREVENCION_FRAUDES.QUERY_FOR_ENVIOHISTORICO` t9 ON t1.IDEXPEDIENTE = t9.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.QUERY_FOR_ENVIOHISTORICO_0000` t14 ON t1.IDEXPEDIENTE = t14.IDEXPEDIENTE
LEFT JOIN `LAN_VERIFICACIONES.CATEGORIA` t16 ON t2.IDCATEGORIA = t16.IDCATEGORIA
LEFT JOIN `STG_PREVENCION_FRAUDES.QUERY_FOR_ENVIOHISTORICO_0001` t17 ON t1.IDEXPEDIENTE = t17.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.QUERY_FOR_ENVIOHISTORICO_0002` t18 ON t1.IDEXPEDIENTE = t18.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.QUERY_FOR_ENVIOHISTORICO_0003` t19 ON t1.IDEXPEDIENTE = t19.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.QUERY_FOR_HISTORICOTERMINOENTREG` t21 ON t1.IDEXPEDIENTE = t21.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.QUERY_FOR_HISTORICOTERMINOE_0001` t22 ON t1.IDEXPEDIENTE = t22.IDEXPEDIENTE
LEFT JOIN `LAN_VERIFICACIONES.EXPEDIENTE` t26 ON t1.IDEXPEDIENTE = t26.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.Prestadores` t12 ON t1.CLAVETALLER = t12.CLAVETALLER
LEFT JOIN `STG_PREVENCION_FRAUDES.MIN_ENTREGA` t13 ON t1.IDEXPEDIENTE = t13.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.TALLERES` t27 ON t1.CLAVETALLER = t27.CLAVETALLER
LEFT JOIN `STG_PREVENCION_FRAUDES.DATOSVEHICULO` t28 ON t1.IDEXPEDIENTE = t28.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.CODIGO_CAUSA` t6 ON t1.CAUSACODIGO = t6.Z_ID
WHERE t1.IDEXPEDIENTE IS NOT NULL;

-- Unión de expediente y el concepto
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.EXPEDIENTES` AS
SELECT 
    t1.IDEXPEDIENTE,
    t2.CONCEPTO
FROM `LAN_VERIFICACIONES.EXPEDIENTE` t1
CROSS JOIN `STG_PREVENCION_FRAUDES.Conceptos` t2
ORDER BY t1.IDEXPEDIENTE;

-- Unión entre BuscaMontosPortal_Complemento, BuscaMontosPortal_Inicial y EXPEDIENTES
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.ConsolidaMontosPortal` AS
SELECT 
    t3.IDEXPEDIENTE,
    t3.CONCEPTO,
    CASE
        WHEN t1.SUM_of_MONTO IS NULL AND t2.SUM_of_MONTO IS NULL THEN 0
        WHEN t1.SUM_of_MONTO IS NULL AND t2.SUM_of_MONTO IS NOT NULL THEN t2.SUM_of_MONTO
        WHEN t1.SUM_of_MONTO IS NOT NULL AND t2.SUM_of_MONTO IS NULL THEN t1.SUM_of_MONTO
        ELSE t1.SUM_of_MONTO + t2.SUM_of_MONTO
    END AS MONTO
FROM `STG_PREVENCION_FRAUDES.EXPEDIENTES` t3
LEFT JOIN `STG_PREVENCION_FRAUDES.BuscaMontosPortal_Inicial` t1 
    ON t3.IDEXPEDIENTE = t1.IDEXPEDIENTE AND t3.CONCEPTO = t1.CONCEPTO
LEFT JOIN `STG_PREVENCION_FRAUDES.BuscaMontosPortal_Complemento` t2 
    ON t3.IDEXPEDIENTE = t2.IDEXPEDIENTE AND t3.CONCEPTO = t2.CONCEPTO;

-- Transposición usando PIVOT (equivalente a PROC TRANSPOSE de SAS)
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TRNSTRANSPOSED` AS
SELECT * FROM (
  SELECT IDEXPEDIENTE, CONCEPTO, MONTO
  FROM `STG_PREVENCION_FRAUDES.ConsolidaMontosPortal`
)
PIVOT (
  SUM(MONTO) FOR CONCEPTO IN ('MOB' AS MOB, 'REF' AS REF, 'HYP' AS HYP)
);

-- Consolidación de montos
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.CONSOLIDAMONTOS` AS
SELECT 
    t1.IDEXPEDIENTE,
    CASE 
        WHEN t1.HYP IS NULL THEN COALESCE(t1.MOB, 0)
        WHEN t1.MOB IS NULL THEN COALESCE(t1.HYP, 0)
        WHEN t1.HYP IS NOT NULL AND t1.MOB IS NOT NULL THEN t1.HYP + t1.MOB
        ELSE 0
    END AS MO,
    COALESCE(t1.REF, 0) AS REF
FROM `STG_PREVENCION_FRAUDES.TRNSTRANSPOSED` t1;

-- Unión entre REP_NO_AUT y HISTORICOTERMINOENTREGA
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.FEC_AUT_NO_REP` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE,
    t2.FECHA AS FECHA_NO_AUT
FROM `STG_PREVENCION_FRAUDES.REP_NO_AUT` t1
LEFT JOIN `LAN_VERIFICACIONES.HISTORICOTERMINOENTREGA` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE 
    AND t1.MAX_of_IDHISTORICOTERMINOENTREGA = t2.IDHISTORICOTERMINOENTREGA;

-- Creación de MAX_FEC_EXP
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.MAX_FEC_EXP` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE,
    t2.FECHA
FROM `STG_PREVENCION_FRAUDES.MAX_ID_EXP` t1
LEFT JOIN `LAN_VERIFICACIONES.HISTORICOTERMINOENTREGA` t2 
    ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE 
    AND t1.MAX_of_IDHISTORICOTERMINOENTREGA = t2.IDHISTORICOTERMINOENTREGA;

-- Unión entre MAX_FEC_EXP, MIN_FEC_ENTREGA y FEC_AUT_NO_REP
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.REINGRESO` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE,
    t1.FECHA,
    t2.MIN_of_FECHA,
    t3.FECHA_NO_AUT,
    CASE
        WHEN t2.MIN_of_FECHA IS NOT NULL 
             AND DATETIME_DIFF(t1.FECHA, t2.MIN_of_FECHA, SECOND)/86400 > 1 
             AND t1.FECHA > t3.FECHA_NO_AUT
        THEN 1
        ELSE 0
    END AS Reingreso_Portal
FROM `STG_PREVENCION_FRAUDES.MAX_FEC_EXP` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.MIN_FEC_ENTREGA` t2 ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.FEC_AUT_NO_REP` t3 ON t1.IDEXPEDIENTE = t3.IDEXPEDIENTE;

-- Creación de Bandejas
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.Bandejas` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.CLAVETALLER,
    t2.Piso,
    t3.Transito,
    t4.Asignado,
    t5.Transito AS Pendiente_Transito
FROM `LAN_VERIFICACIONES.DATOSGENERALES` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.Piso` t2 ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.Transito` t3 ON t1.IDEXPEDIENTE = t3.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.Asignado` t4 ON t1.IDEXPEDIENTE = t4.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.PENDIENTE_TRANSITO` t5 ON t1.IDEXPEDIENTE = t5.IDEXPEDIENTE;

-- Agregación de bandejas
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.bandeja` AS
SELECT 
    t1.CLAVETALLER,
    SUM(COALESCE(t1.Asignado, 0)) AS Asignados,
    SUM(COALESCE(t1.Transito, 0)) AS Transitos,
    SUM(COALESCE(t1.Piso, 0)) AS Pisos,
    SUM(COALESCE(t1.Pendiente_Transito, 0)) AS Pendiente_Transito
FROM `STG_PREVENCION_FRAUDES.Bandejas` t1
GROUP BY t1.CLAVETALLER;

-- Query para todas las piezas
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_TODASLASPIEZAS` AS
SELECT 
    t3.IDEXPEDIENTE,
    COUNT(t3.IDEXPEDIENTE) AS PIEZASAUTORIZADAS,
    SUM(
        CASE 
            WHEN t3.CDRCOTIZADOR = 1 
            THEN CASE WHEN t3.FECENTREGAREFACCIONARIA IS NOT NULL THEN 1 ELSE 0 END
            ELSE CASE WHEN t3.FECHAACTUALIZACION IS NOT NULL AND t3.FECHAACTUALIZACION <> t3.FECHAEXPEDICION THEN 1 ELSE 0 END
        END
    ) AS PIEZASENTREGADAS
FROM `STG_PREVENCION_FRAUDES.PZA` t3
WHERE t3.IDVALUACION = '01' AND t3.IDVALEESTATUS = '01'
GROUP BY t3.IDEXPEDIENTE;

-- Mínimo de FecExpedicion
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.MIN_EXPEDICION_0000` AS
SELECT 
    t2.IDEXPEDIENTE,
    t2.CDRCOTIZADOR,
    t2.CDRAUTOSURTIDO,
    t2.LLAVEPIEZA,
    MIN(t2.FECHAEXPEDICION) AS Min_FecExpedicion
FROM `STG_PREVENCION_FRAUDES.PZA` t2
GROUP BY t2.IDEXPEDIENTE, t2.CDRCOTIZADOR, t2.CDRAUTOSURTIDO, t2.LLAVEPIEZA;

-- Máximo de FecEntrega
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.MAX_ENTREGA_0000` AS
SELECT 
    t1.LLAVEPIEZA,
    MAX(t1.FECENTREGAREFACCIONARIA) AS Max_FecEntrega
FROM `STG_PREVENCION_FRAUDES.PZA` t1
GROUP BY t1.LLAVEPIEZA;

-- Consolidado de fechas
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.CONSOLIDADOFEC` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.CDRCOTIZADOR,
    t1.CDRAUTOSURTIDO,
    t1.LLAVEPIEZA,
    t1.Min_FecExpedicion,
    t2.Max_FecEntrega,
    DATE_DIFF(DATE(t2.Max_FecEntrega), DATE(t1.Min_FecExpedicion), DAY) AS tEntregaPieza_Hab,
    DATETIME_DIFF(t2.Max_FecEntrega, t1.Min_FecExpedicion, SECOND)/86400 AS tEntregaPieza_Nat,
    CASE WHEN t2.Max_FecEntrega IS NULL THEN 0 ELSE 1 END AS PiezaEntregada
FROM `STG_PREVENCION_FRAUDES.MIN_EXPEDICION_0000` t1
INNER JOIN `STG_PREVENCION_FRAUDES.MAX_ENTREGA_0000` t2 ON t1.LLAVEPIEZA = t2.LLAVEPIEZA;

-- Consolidado de fechas de piezas
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.ConsolidadoFechasPiezas` AS
SELECT DISTINCT 
    t1.IDEXPEDIENTE,
    t1.CDRCOTIZADOR,
    t1.CDRAUTOSURTIDO,
    SUM(t1.tEntregaPieza_Hab) AS SUM_tEntregaPieza_Hab,
    SUM(t1.tEntregaPieza_Nat) AS SUM_tEntregaPieza_Nat,
    SUM(t1.PiezaEntregada) AS SUM_PiezaEntregada
FROM `STG_PREVENCION_FRAUDES.CONSOLIDADOFEC` t1
GROUP BY t1.IDEXPEDIENTE, t1.CDRCOTIZADOR, t1.CDRAUTOSURTIDO;

-- Primer Envío
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.PrimerEnvio` AS
SELECT 
    t3.IDEXPEDIENTE,
    t2.FECADJUDICACION,
    t3.MIN_of_FECHAENVIOTALLER AS PrimerEnvioCDR,
    DATETIME_DIFF(t3.min_of_fechaenviotaller, t2.fecadjudicacion, SECOND)/3600 AS HORAS_PRIMERENVIO,
    CASE 
        WHEN t3.ExpedienteValidoTiempos = 0 
             OR t2.fecadjudicacion IS NULL 
             OR DATETIME_DIFF(t3.min_of_fechaenviotaller, t2.fecadjudicacion, SECOND) < -600 
        THEN 0 
        ELSE 1 
    END AS ExpedienteValidoTiempos
FROM `LAN_VERIFICACIONES.FECHAS` t2
INNER JOIN `STG_PREVENCION_FRAUDES.MinimoEnvioCDR` t3 ON t2.IDEXPEDIENTE = t3.IDEXPEDIENTE;

-- Tiempo Total CDR
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TiempoTotalCDR` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.FECADJUDICACION,
    t1.PrimerEnvioCDR,
    t1.HORAS_PRIMERENVIO,
    t2.horasTallerComplementos,
    COALESCE(t1.HORAS_PRIMERENVIO, 0) + COALESCE(t2.horasTallerComplementos, 0) AS tiempoTotalCDR,
    CASE WHEN t1.ExpedienteValidoTiempos = 0 OR t2.expValido = 0 THEN 1 ELSE 0 END AS ExpedienteDesviacion
FROM `STG_PREVENCION_FRAUDES.PrimerEnvio` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.TiempoTallerComplementos` t2 ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE;

-- Total Tiempos Valuación
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.TotalTiemposValuacion` AS
SELECT 
    t1.IDEXPEDIENTE,
    t1.FECADJUDICACION,
    t1.PrimerEnvioCDR,
    t3.FEC_PRIMERA_ASIG_CARR,
    t1.HORAS_PRIMERENVIO,
    t1.horasTallerComplementos,
    t1.tiempoTotalCDR,
    t2.TiempoPrimeraAutorizacion,
    t2.TiempoAutorizacionComplementos,
    t2.tiempoTotalAutorizacion,
    t3.TiempoPrimerCarrusel,
    t3.tiempoCarrComp,
    t3.tiempoTotalCarrusel,
    t2.TiempoPrimeraAutorizacion - t3.TiempoPrimerCarrusel AS tiempoPrimeraAutValuador,
    t2.TiempoAutorizacionComplementos - t3.tiempoCarrComp AS tiempoCompAutValuador,
    t2.tiempoTotalAutorizacion - t3.tiempoTotalCarrusel AS tiempoTotalAutValuador,
    t4.ENVIOS,
    t1.ExpedienteDesviacion
FROM `STG_PREVENCION_FRAUDES.TiempoTotalCDR` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.TiempoTotalValuacion` t2 ON t1.IDEXPEDIENTE = t2.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.TiempoTotalCarrusel` t3 ON t1.IDEXPEDIENTE = t3.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.CuentaEnvios` t4 ON t1.IDEXPEDIENTE = t4.IDEXPEDIENTE;

-- Query para DATOSGENERALES_0000
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.QUERY_FOR_DATOSGENERALES_0000` AS
SELECT 
    t1.idExp,
    t1.Ejercicio,
    t1.Reporte,
    t1.Siniestro,
    t1.TIPORIESGO,
    t1.CODAFECTADO,
    t1.CODIGOASEGURADO,
    t1.NUMPOLIZA,
    t1.NUMENDOSO,
    t1.NUMINCISO,
    t1.NOMCONDUCTOR,
    t3.CAUSA,
    t3.CAUSA_HOMOLOGADA,
    t1.CAUSACODIGO AS CAUSACODIGO_DG,
    t1.CAUSADESCRIP AS CAUSADESCRIP_DG,
    t1.MarcaVehiculo,
    t1.TIPO,
    t1.MODELO,
    t1.Color,
    t1.PLACAS,
    t1.SERIE,
    t1.UNIDAD,
    t1.CLIENTE,
    t1.OFICINA,
    t1.GRUPO_NEGOCIO,
    t3.CVE_AGENTE,
    t3.Agente,
    t1.AGENTE AS AGENTE_DG,
    t3.Gerente,
    t3.Oficina AS OficinaEmision,
    t1.OFIEMICODIGO AS Oficina_Emision_DG,
    t1.OFIEMIDESCRIP AS Ofi_Emi_DG,
    t3.Oficina_Beneficiario AS OficinaSiniestros,
    t3.Director,
    t1.PRESUPUESTOMOB,
    t1.PIEZASCAMBIO,
    t1.SUMAASEG_DG,
    t1.MONTODEDUCIBLE_DG,
    t1.TRANSITO,
    t1.PISO,
    t1.Transito_Activo,
    t1.Piso_Activo,
    t1.GRUA,
    t1.Complemento,
    t3.REF,
    t3.MO,
    t3.Importe_Reparaciones,
    t1.CLAVETALLER,
    t6.Asignados,
    t6.Transitos,
    t6.Pisos,
    t6.Pendiente_Transito,
    t1.CODVALUADOR,
    t1.HerramientaValuacion,
    t1.EstatusValuacion,
    t1.TipoValuador,
    t1.Bandeja,
    t3.Fecha_Captura AS FECHACAPTURA,
    t7.FECSINIESTRO,
    t7.FECHAOCURRIDOSISE,
    t1.FECASIGNACION,
    t1.FECADJUDICACION,
    t1.FECENVIO,
    t1.FecValuacion,
    t2.MAX_of_FECHAACTUALIZACION_FPR AS FecModificacion,
    t1.FECINGRESO,
    t1.PRIMERTERMINO,
    t1.PRIMERENTREGA,
    t1.FECTERMINADO,
    t1.FECENTREGADO,
    t1.FECHAESTENT,
    t1.UltimoEnvioCDR,
    t7.FECAUTORIZACION,
    t1.PrimeraAutorizacion,
    t1.UltimaAutorizacion,
    COALESCE(t5.Reingreso_Portal, 0) AS Reingreso_Portal,
    t2.PIEZASAUTORIZADAS,
    t2.PIEZASENTREGADAS,
    t1.DiasDifEnvioAutorizacion,
    t1.DIFDIASTERMINO,
    t1.FecAutMayor,
    t1.DiasReparacion,
    t1.DiasValuacion,
    t1.EstatusExpediente,
    t1.DiasEnv,
    t1.RegionValuacion,
    t1.EstadoCDR,
    t1.Pob_Comer,
    t1.CLAVESUPERVISOR,
    t1.NOMBRENNALISTA,
    t1.TipoCDR_Portal,
    t1.TipoCDR,
    t1.MarcaCDR,
    t1.NombreCDR,
    t1.Nom_CDR_Comer,
    t1.TablaSupervisor,
    t4.CDRCOTIZADOR,
    t4.CDRAUTOSURTIDO,
    CASE 
        WHEN t2.IDEXPEDIENTE = t1.idExp THEN t2.MAX_of_FECHAPROMESAREAL
        ELSE t1.FECPROMESA
    END AS FecPromesa,
    CASE WHEN t1.idExp = t2.IDEXPEDIENTE THEN 1 ELSE 0 END AS CambioFecha,
    CASE 
        WHEN t1.fecenvio IS NOT NULL AND t1.fecvaluacion IS NOT NULL
        THEN DATE_DIFF(DATE(t1.FecValuacion), DATE(t1.FECENVIO), DAY)
    END AS DiasValuacion,
    t1.SUBRAMO
FROM `STG_PREVENCION_FRAUDES.QUERY_FOR_DATOSGENERALES` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.QUERY_FOR_FECHAPROMESAREALANLCDR` t2 ON t1.idExp = t2.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.QUERY_FOR_VALUACION` t3 ON t1.VALUACION = t3.VALUACION
LEFT JOIN `STG_PREVENCION_FRAUDES.ConsolidadoFechasPiezas` t4 ON t1.idExp = t4.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.REINGRESO` t5 ON t1.idExp = t5.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.bandeja` t6 ON t1.CLAVETALLER = t6.CLAVETALLER
LEFT JOIN `LAN_VERIFICACIONES.FECHAS` t7 ON t1.idExp = t7.IDEXPEDIENTE;

-- DG_SUPER_SERVICIO
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.DG_SUPER_SERVICIO` AS
SELECT DISTINCT 
    t1.idExp,
    t1.Ejercicio,
    t1.Reporte,
    t1.Siniestro,
    t1.TIPORIESGO,
    t1.CODAFECTADO,
    t1.CODIGOASEGURADO,
    t1.NUMPOLIZA,
    t1.NUMENDOSO,
    t1.NUMINCISO,
    t1.NOMCONDUCTOR,
    t1.CAUSA,
    t1.CAUSA_HOMOLOGADA,
    t1.CAUSACODIGO_DG,
    t1.CAUSADESCRIP_DG,
    t1.MarcaVehiculo,
    t1.TIPO,
    t1.MODELO,
    t1.Color,
    t1.PLACAS,
    t1.SERIE,
    t1.UNIDAD,
    t1.CLIENTE,
    t1.OFICINA,
    t1.GRUPO_NEGOCIO,
    t1.CVE_AGENTE,
    t1.Agente,
    t1.AGENTE_DG,
    t1.Gerente,
    t1.OficinaEmision,
    t1.Oficina_Emision_DG,
    t1.Ofi_Emi_DG,
    t1.OficinaSiniestros,
    t1.Director,
    t1.PRESUPUESTOMOB,
    t1.PIEZASCAMBIO,
    t1.SUMAASEG_DG,
    t1.MONTODEDUCIBLE_DG,
    t1.TRANSITO,
    t1.PISO,
    t1.Transito_Activo,
    t1.Piso_Activo,
    t1.GRUA,
    t1.Complemento,
    t1.REF,
    t1.MO,
    t1.Importe_Reparaciones,
    t1.CLAVETALLER,
    t1.Asignados,
    t1.Transitos,
    t1.Pisos,
    t1.Pendiente_Transito,
    t1.CODVALUADOR,
    t1.HerramientaValuacion,
    t1.EstatusValuacion,
    t1.TipoValuador,
    t1.Bandeja,
    t1.FECHACAPTURA,
    t1.FECSINIESTRO,
    t1.FECHAOCURRIDOSISE,
    t1.FECASIGNACION,
    t1.FECADJUDICACION,
    t1.FECENVIO,
    t1.FecValuacion,
    t1.FecModificacion,
    t1.FECINGRESO,
    t1.PRIMERTERMINO,
    t1.PRIMERENTREGA,
    t1.FECTERMINADO,
    t1.FECENTREGADO,
    t1.FECHAESTENT,
    t1.UltimoEnvioCDR,
    t1.FECAUTORIZACION,
    t1.PrimeraAutorizacion,
    t1.UltimaAutorizacion,
    t1.Reingreso_Portal,
    t1.PIEZASAUTORIZADAS,
    t1.PIEZASENTREGADAS,
    t1.DiasDifEnvioAutorizacion,
    t1.DIFDIASTERMINO,
    t1.FecAutMayor,
    t1.DiasReparacion,
    t1.DiasValuacion,
    t1.EstatusExpediente,
    t1.DiasEnv,
    t1.RegionValuacion,
    t1.EstadoCDR,
    t1.Pob_Comer,
    t1.CLAVESUPERVISOR,
    t1.NOMBRENNALISTA,
    t2.CLAVEANALISTA_SUPSERV,
    t2.NOMBRE_SUPERSERV,
    t1.TipoCDR_Portal,
    t1.TipoCDR,
    t1.MarcaCDR,
    t1.NombreCDR,
    t1.Nom_CDR_Comer,
    t1.TablaSupervisor,
    t1.CDRCOTIZADOR,
    t1.CDRAUTOSURTIDO,
    t1.FecPromesa,
    t1.CambioFecha,
    t1.SUBRAMO,
    t1.FecPromesa AS FecPromesa1,
    CASE
        WHEN t3.IDEXPEDIENTE IS NOT NULL THEN 1
        ELSE 0
    END AS REAL_CE
FROM `STG_PREVENCION_FRAUDES.QUERY_FOR_DATOSGENERALES_0000` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.SUPERVISOR_SERVICIO` t2 ON t1.CLAVETALLER = t2.CLAVETALLER
LEFT JOIN `STG_PREVENCION_FRAUDES.REAL_CE` t3 ON t1.idExp = t3.IDEXPEDIENTE;

-- Tabla SUPERVISOR_ (penúltima tabla antes de la final)
CREATE OR REPLACE TABLE `STG_PREVENCION_FRAUDES.SUPERVISOR_` AS
SELECT DISTINCT 
    t1.idExp,
    t1.Ejercicio,
    t1.Reporte,
    t1.Siniestro,
    t1.CODAFECTADO,
    t1.TIPORIESGO,
    t1.CODIGOASEGURADO,
    t1.NUMPOLIZA,
    t1.NUMENDOSO,
    t1.NUMINCISO,
    t1.NOMCONDUCTOR,
    t1.CAUSA,
    t1.CAUSA_HOMOLOGADA,
    t1.CAUSACODIGO_DG,
    t1.CAUSADESCRIP_DG,
    t1.MarcaVehiculo,
    t1.TIPO,
    t1.MODELO,
    t1.Color,
    t1.PLACAS,
    t1.SERIE,
    t1.UNIDAD,
    t1.CLIENTE,
    t1.OFICINA,
    t1.GRUPO_NEGOCIO,
    t1.CVE_AGENTE,
    t1.Agente,
    t1.AGENTE_DG,
    t1.Gerente,
    t1.OficinaEmision,
    t1.Oficina_Emision_DG,
    t1.Ofi_Emi_DG,
    t1.OficinaSiniestros,
    t1.Director,
    t1.PRESUPUESTOMOB,
    t1.PIEZASCAMBIO,
    t1.SUMAASEG_DG,
    t1.MONTODEDUCIBLE_DG,
    t1.TRANSITO,
    t1.PISO,
    t1.Transito_Activo,
    t1.Piso_Activo,
    t1.GRUA,
    t1.Complemento,
    t1.CLAVETALLER,
    t1.Asignados,
    t1.Transitos,
    t1.Pisos,
    t1.Pendiente_Transito,
    t1.CODVALUADOR,
    t1.HerramientaValuacion,
    t1.EstatusValuacion,
    t1.TipoValuador,
    t1.Bandeja,
    t3.ExpedienteDesviacion,
    t5.MO,
    t5.REF,
    t1.FECSINIESTRO,
    t1.FECHAOCURRIDOSISE,
    t1.FECASIGNACION,
    t1.FECADJUDICACION,
    t1.FECADJUDICACION AS Fec_Adjudicacion,
    t3.PrimerEnvioCDR,
    t1.FECENVIO,
    t1.FecValuacion,
    t1.FecModificacion,
    t1.FECINGRESO,
    t1.FECINGRESO AS Fec_Ingreso,
    t1.FECTERMINADO,
    t1.PRIMERTERMINO,
    t1.PRIMERENTREGA,
    t1.PRIMERTERMINO AS PRIMERTERMINO1,
    t1.FECTERMINADO AS Fec_Terminado,
    t1.FECENTREGADO,
    t1.FecPromesa1,
    t1.UltimoEnvioCDR,
    t1.FECAUTORIZACION,
    t1.PrimeraAutorizacion,
    t1.UltimaAutorizacion,
    COALESCE(t1.Reingreso_Portal, 0) AS Reingreso_Portal,
    t2.PIEZASAUTORIZADAS,
    t2.PIEZASENTREGADAS,
    t1.DiasDifEnvioAutorizacion,
    t1.DIFDIASTERMINO,
    t1.FecAutMayor,
    t1.DiasReparacion,
    t1.DiasValuacion,
    t1.EstatusExpediente,
    t1.DiasEnv,
    t1.RegionValuacion,
    t1.EstadoCDR,
    t1.Pob_Comer,
    t1.CLAVESUPERVISOR,
    t1.NOMBRENNALISTA,
    t1.CLAVEANALISTA_SUPSERV,
    t1.NOMBRE_SUPERSERV,
    t1.TipoCDR_Portal,
    t1.TipoCDR,
    t1.MarcaCDR,
    t1.NombreCDR,
    t1.Nom_CDR_Comer,
    t1.TablaSupervisor,
    CASE 
        WHEN t1.FecPromesa1 > t1.FECHAESTENT THEN t1.FecPromesa1
        WHEN t1.FECHAESTENT IS NULL THEN t1.FecPromesa1
        ELSE t1.FECHAESTENT
    END AS FecPromesa,
    t1.CambioFecha,
    t1.CAMBIOTERMINO,
    t3.HORAS_PRIMERENVIO AS tiempoPrimerEnvio,
    t3.horasTallerComplementos AS tiempoTallerComplementos,
    t3.tiempoTotalCDR,
    t3.TiempoPrimeraAutorizacion,
    t3.tiempoTotalAutorizacion,
    t3.TiempoAutorizacionComplementos,
    t3.TiempoPrimerCarrusel,
    t3.tiempoCarrComp,
    t3.tiempoTotalCarrusel,
    t3.tiempoPrimeraAutValuador,
    t3.tiempoCompAutValuador,
    t3.tiempoTotalAutValuador,
    t3.ENVIOS,
    t4.SUM_tEntregaPieza_Hab,
    t4.SUM_tEntregaPieza_Nat,
    t4.SUM_PiezaEntregada,
    CASE WHEN t3.IDEXPEDIENTE <> t1.idexp OR t3.IDEXPEDIENTE IS NULL THEN 0 ELSE 1 END AS ExpValidoTiempos,
    CASE 
        WHEN EXTRACT(MONTH FROM DATE(t1.fecadjudicacion)) < 10
        THEN CONCAT(CAST(EXTRACT(YEAR FROM DATE(t1.fecadjudicacion)) AS STRING), '_0', CAST(EXTRACT(MONTH FROM DATE(t1.fecadjudicacion)) AS STRING))
        ELSE CONCAT(CAST(EXTRACT(YEAR FROM DATE(t1.fecadjudicacion)) AS STRING), '_', CAST(EXTRACT(MONTH FROM DATE(t1.fecadjudicacion)) AS STRING))
    END AS AAMM_Adj,
    CASE 
        WHEN EXTRACT(MONTH FROM DATE(t1.fecenvio)) < 10
        THEN CONCAT(CAST(EXTRACT(YEAR FROM DATE(t1.fecenvio)) AS STRING), '_0', CAST(EXTRACT(MONTH FROM DATE(t1.fecenvio)) AS STRING))
        ELSE CONCAT(CAST(EXTRACT(YEAR FROM DATE(t1.fecenvio)) AS STRING), '_', CAST(EXTRACT(MONTH FROM DATE(t1.fecenvio)) AS STRING))
    END AS AAMM_Env,
    CASE WHEN t1.FECENVIO IS NOT NULL THEN 1 ELSE 0 END AS ExpEnviado,
    -- RankEnvio
    CASE 
        WHEN t1.diasenv IS NOT NULL AND t1.diasenv >= 0 THEN
            CASE 
                WHEN t1.DiasEnv = 0 THEN 'A'
                WHEN t1.diasenv = 1 THEN 'B' 
                ELSE 'C' 
            END
        ELSE
            CASE 
                WHEN DATE_DIFF(DATE(CURRENT_DATETIME()), DATE(t1.fecadjudicacion), DAY) = 0 THEN 'A'
                WHEN DATE_DIFF(DATE(CURRENT_DATETIME()), DATE(t1.fecadjudicacion), DAY) = 1 THEN 'B'
                WHEN DATE_DIFF(DATE(CURRENT_DATETIME()), DATE(t1.fecadjudicacion), DAY) > 1 THEN 'C'
            END
    END AS RankEnvio,
    CASE WHEN t1.FECTERMINADO IS NOT NULL THEN 1 ELSE 0 END AS VehTerminado,
    CASE WHEN t1.PRIMERTERMINO IS NOT NULL THEN 1 ELSE 0 END AS VehTerminadoPrimeraVez,
    -- RankPromesa
    CASE 
        WHEN t1.fecingreso IS NOT NULL THEN
            CASE 
                WHEN t1.fecpromesa IS NOT NULL THEN
                    CASE 
                        WHEN t1.fecterminado IS NOT NULL THEN
                            CASE WHEN t1.FECTERMINADO <= DATETIME_ADD(t1.FecPromesa, INTERVAL 1 DAY) THEN 'Cumplió promesa' ELSE 'No cumplió promesa' END
                        ELSE
                            CASE WHEN CURRENT_DATETIME() <= DATETIME_ADD(t1.FecPromesa, INTERVAL 1 DAY) THEN 'Fecha promesa en tiempo' ELSE 'Fecha promesa vencida' END
                    END
                ELSE 'SIN FECHA PROMESA'
            END
        ELSE 'Sin fecha ingreso'
    END AS RankPromesa,
    -- DiasPromesaVencida
    CASE 
        WHEN t1.fecingreso IS NOT NULL AND t1.fecterminado IS NULL AND t1.fecpromesa IS NOT NULL AND CURRENT_DATETIME() > t1.fecpromesa 
        THEN DATETIME_DIFF(CURRENT_DATETIME(), t1.FecPromesa, SECOND)/86400
    END AS DiasPromesaVencida,
    1 AS nExp,
    -- tCorrido
    CASE
        WHEN t1.fecterminado IS NOT NULL THEN
            CASE WHEN t1.fecpromesa < t1.fecterminado THEN DATE_DIFF(DATE(t1.fecterminado), DATE(t1.fecpromesa), DAY) ELSE DATE_DIFF(DATE(t1.fecpromesa), DATE(t1.fecterminado), DAY) END
        ELSE
            CASE WHEN t1.fecpromesa < CURRENT_DATETIME() THEN DATE_DIFF(DATE(CURRENT_DATETIME()), DATE(t1.fecpromesa), DAY) ELSE DATE_DIFF(DATE(t1.fecpromesa), DATE(CURRENT_DATETIME()), DAY) END
    END AS tCorrido,
    -- DiasRepReal_PrimerTermino
    CASE
        WHEN t1.EstatusValuacion = 'REPARACION' AND t1.primertermino IS NOT NULL AND t1.primertermino >= t1.fecingreso 
        THEN DATE_DIFF(DATE(t1.primertermino), DATE(t1.fecingreso), DAY)
        WHEN t1.EstatusValuacion = 'REPARACION' AND t1.FECTERMINADO IS NOT NULL AND t1.primertermino < t1.fecingreso AND t1.FECTERMINADO >= t1.fecingreso 
        THEN DATE_DIFF(DATE(t1.FECTERMINADO), DATE(t1.fecingreso), DAY)
    END AS DiasRepReal_PrimerTermino,
    -- DiasRepReal
    CASE WHEN t1.FECTERMINADO IS NOT NULL AND t1.fecterminado > t1.fecingreso THEN DATE_DIFF(DATE(t1.fecterminado), DATE(t1.fecingreso), DAY) END AS DiasRepReal,
    -- DifDiasRep
    CASE WHEN t1.fecterminado IS NOT NULL THEN DATE_DIFF(DATE(t1.fecterminado), DATE(t1.fecingreso), DAY) - t1.DiasReparacion END AS DifDiasRep,
    -- CumplePromesa
    CASE 
        WHEN t1.fecingreso IS NOT NULL AND t1.fecpromesa IS NOT NULL AND t1.fecterminado IS NOT NULL AND t1.FECTERMINADO <= DATETIME_ADD(t1.FecPromesa, INTERVAL 1 DAY) 
        THEN 1 
    END AS CumplePromesa,
    -- NoCumplePromesa
    CASE 
        WHEN t1.fecingreso IS NOT NULL AND t1.fecpromesa IS NOT NULL AND t1.fecterminado IS NOT NULL AND t1.FECTERMINADO > DATETIME_ADD(t1.FecPromesa, INTERVAL 1 DAY) 
        THEN 1 
    END AS NoCumplePromesa,
    -- CumplePromesa_PrimerTermino
    CASE 
        WHEN t1.fecingreso IS NOT NULL AND t1.fecpromesa IS NOT NULL AND t1.primertermino IS NOT NULL AND t1.PRIMERTERMINO <= DATETIME_ADD(t1.FecPromesa, INTERVAL 1 DAY) 
        THEN 1 
    END AS CumplePromesa_PrimerTermino,
    -- NoCumplePromesa_PrimerTermino
    CASE 
        WHEN t1.fecingreso IS NOT NULL AND t1.fecpromesa IS NOT NULL AND t1.primertermino IS NOT NULL AND t1.PRIMERTERMINO > DATETIME_ADD(t1.FecPromesa, INTERVAL 1 DAY) 
        THEN 1 
    END AS NoCumplePromesa_PrimerTermino,
    -- PromesaVencida
    CASE 
        WHEN t1.fecingreso IS NOT NULL AND t1.fecterminado IS NULL AND t1.fecpromesa IS NOT NULL AND DATETIME_ADD(t1.fecpromesa, INTERVAL 1 DAY) <= CURRENT_DATETIME() 
        THEN 1 
    END AS PromesaVencida,
    -- PromesaPorVencer
    CASE 
        WHEN t1.fecingreso IS NOT NULL AND t1.fecpromesa IS NOT NULL AND t1.fecterminado IS NULL AND DATETIME_ADD(t1.fecpromesa, INTERVAL 1 DAY) > CURRENT_DATETIME() 
        THEN 1 
    END AS PromesaPorVencer,
    -- Vencido
    CASE 
        WHEN t1.fecingreso IS NOT NULL AND t1.fecpromesa IS NOT NULL THEN
            CASE 
                WHEN t1.fecterminado IS NOT NULL AND t1.fecterminado > DATETIME_ADD(t1.fecpromesa, INTERVAL 1 DAY) THEN 1
                WHEN t1.fecterminado IS NULL AND CURRENT_DATETIME() > DATETIME_ADD(t1.fecpromesa, INTERVAL 1 DAY) THEN 1
            END
    END AS Vencido,
    -- EnTiempo
    CASE 
        WHEN t1.fecingreso IS NOT NULL AND t1.fecpromesa IS NOT NULL THEN
            CASE 
                WHEN t1.fecterminado IS NOT NULL AND t1.fecterminado <= t1.fecpromesa THEN 1
                WHEN t1.fecterminado IS NULL AND CURRENT_DATETIME() <= t1.fecpromesa THEN 1
            END
    END AS EnTiempo,
    CASE WHEN t1.fecingreso IS NOT NULL THEN 1 ELSE 0 END AS VehiculoIngresado,
    CASE WHEN t1.FECTERMINADO IS NULL THEN 1 ELSE 0 END AS VehNoTerminado,
    t1.VehEntregado,
    CASE WHEN t1.FECTERMINADO IS NULL THEN DATE_DIFF(DATE(CURRENT_DATETIME()), DATE(t1.fecingreso), DAY) END AS DiasSinTerminar,
    DATE_DIFF(DATE(t1.FECTERMINADO), DATE(t1.FECADJUDICACION), DAY) AS DiasProceso,
    CASE WHEN t1.estatusvaluacion = 'REPARACION' AND t1.fecingreso IS NOT NULL AND (DATETIME_DIFF(CURRENT_DATETIME(), t1.fecingreso, SECOND)/86400) > 30 THEN 1 ELSE 0 END AS MAS_30_DIAS,
    DATETIME_DIFF(CURRENT_DATETIME(), t1.fecingreso, SECOND)/86400 AS DiasDesdeIngreso,
    CASE WHEN t1.primertermino IS NOT NULL THEN DATE_DIFF(DATE(t1.primertermino), DATE(t1.fecingreso), DAY) - t1.DiasReparacion END AS DifDiasRep_PrimerTermino,
    -- CATEGORIAVALUACION
    CASE 
        WHEN t1.TipoValuador = 'AUTOS' THEN
            CASE
                WHEN t2.piezasautorizadas IS NULL THEN 'V0 - 0 piezas'
                WHEN t2.piezasautorizadas > 0 AND t2.piezasautorizadas <= 3 THEN 'V1 - 1 a 3 piezas'
                WHEN t2.piezasautorizadas > 3 AND t2.piezasautorizadas <= 10 THEN 'V2 - 4 a 10 piezas'
                WHEN t2.piezasautorizadas > 10 AND t2.piezasautorizadas <= 23 THEN 'V3 - 11 a 23 piezas'
                WHEN t2.piezasautorizadas > 23 THEN 'V4 - más de 24 piezas'
                ELSE ''
            END
        WHEN t1.TipoValuador = 'EP' THEN
            CASE 
                WHEN t5.MO + t5.REF = 0 THEN 'VEP0'
                WHEN t5.MO + t5.REF > 0 AND t5.MO + t5.REF <= 35000 THEN 'VEP1'
                WHEN t5.MO + t5.REF > 35000 AND t5.MO + t5.REF <= 110000 THEN 'VEP2'
                WHEN t5.MO + t5.REF > 110000 AND t5.MO + t5.REF <= 200000 THEN 'VEP3'
                WHEN t5.MO + t5.REF > 200000 THEN 'VEP4'
                ELSE ''
            END
    END AS CATEGORIAVALUACION,
    -- tiempoPrimeraValuacion
    CASE WHEN t1.FECENVIO < t1.fecvaluacion THEN DATETIME_DIFF(t1.FECVALUACION, t1.FECENVIO, SECOND)/3600 END AS tiempoPrimeraValuacion,
    CASE WHEN t6.IDEXPEDIENTE = t1.idExp THEN 1 ELSE 0 END AS ExpedienteInvestigacion,
    t1.SinSiniestro,
    -- TIPO_VE
    CASE
        WHEN t2.piezasautorizadas IS NULL THEN 'V0'
        WHEN t2.piezasautorizadas > 0 AND t2.piezasautorizadas <= 3 THEN CONCAT('V1,', CAST(t2.PIEZASAUTORIZADAS AS STRING))
        WHEN t2.piezasautorizadas > 3 AND t2.piezasautorizadas <= 10 THEN CONCAT('V2,', CAST(t2.PIEZASAUTORIZADAS AS STRING))
        WHEN t2.piezasautorizadas > 10 AND t2.piezasautorizadas <= 23 THEN CONCAT('V3,', CAST(t2.PIEZASAUTORIZADAS AS STRING))
        WHEN t2.piezasautorizadas > 23 THEN CONCAT('V4,', CAST(t2.PIEZASAUTORIZADAS AS STRING))
        ELSE ''
    END AS TIPO_VE,
    -- DIAS META
    CASE
        WHEN (CASE 
            WHEN t1.TipoValuador = 'AUTOS' THEN
                CASE
                    WHEN t2.piezasautorizadas IS NULL THEN 'V0 - 0 piezas'
                    WHEN t2.piezasautorizadas > 0 AND t2.piezasautorizadas <= 3 THEN 'V1 - 1 a 3 piezas'
                    WHEN t2.piezasautorizadas > 3 AND t2.piezasautorizadas <= 10 THEN 'V2 - 4 a 10 piezas'
                    WHEN t2.piezasautorizadas > 10 AND t2.piezasautorizadas <= 23 THEN 'V3 - 11 a 23 piezas'
                    WHEN t2.piezasautorizadas > 23 THEN 'V4 - más de 24 piezas'
                    ELSE ''
                END
            WHEN t1.TipoValuador = 'EP' THEN
                CASE 
                    WHEN t5.MO + t5.REF = 0 THEN 'VEP0'
                    WHEN t5.MO + t5.REF > 0 AND t5.MO + t5.REF <= 35000 THEN 'VEP1'
                    WHEN t5.MO + t5.REF > 35000 AND t5.MO + t5.REF <= 110000 THEN 'VEP2'
                    WHEN t5.MO + t5.REF > 110000 AND t5.MO + t5.REF <= 200000 THEN 'VEP3'
                    WHEN t5.MO + t5.REF > 200000 THEN 'VEP4'
                    ELSE ''
                END
        END) = 'V0 - 0 piezas' THEN 2.95
        WHEN (CASE 
            WHEN t1.TipoValuador = 'AUTOS' THEN
                CASE
                    WHEN t2.piezasautorizadas IS NULL THEN 'V0 - 0 piezas'
                    WHEN t2.piezasautorizadas > 0 AND t2.piezasautorizadas <= 3 THEN 'V1 - 1 a 3 piezas'
                    WHEN t2.piezasautorizadas > 3 AND t2.piezasautorizadas <= 10 THEN 'V2 - 4 a 10 piezas'
                    WHEN t2.piezasautorizadas > 10 AND t2.piezasautorizadas <= 23 THEN 'V3 - 11 a 23 piezas'
                    WHEN t2.piezasautorizadas > 23 THEN 'V4 - más de 24 piezas'
                    ELSE ''
                END
            WHEN t1.TipoValuador = 'EP' THEN
                CASE 
                    WHEN t5.MO + t5.REF = 0 THEN 'VEP0'
                    WHEN t5.MO + t5.REF > 0 AND t5.MO + t5.REF <= 35000 THEN 'VEP1'
                    WHEN t5.MO + t5.REF > 35000 AND t5.MO + t5.REF <= 110000 THEN 'VEP2'
                    WHEN t5.MO + t5.REF > 110000 AND t5.MO + t5.REF <= 200000 THEN 'VEP3'
                    WHEN t5.MO + t5.REF > 200000 THEN 'VEP4'
                    ELSE ''
                END
        END) = 'V1 - 1 a 3 piezas' THEN 4.4
        WHEN (CASE 
            WHEN t1.TipoValuador = 'AUTOS' THEN
                CASE
                    WHEN t2.piezasautorizadas IS NULL THEN 'V0 - 0 piezas'
                    WHEN t2.piezasautorizadas > 0 AND t2.piezasautorizadas <= 3 THEN 'V1 - 1 a 3 piezas'
                    WHEN t2.piezasautorizadas > 3 AND t2.piezasautorizadas <= 10 THEN 'V2 - 4 a 10 piezas'
                    WHEN t2.piezasautorizadas > 10 AND t2.piezasautorizadas <= 23 THEN 'V3 - 11 a 23 piezas'
                    WHEN t2.piezasautorizadas > 23 THEN 'V4 - más de 24 piezas'
                    ELSE ''
                END
            WHEN t1.TipoValuador = 'EP' THEN
                CASE 
                    WHEN t5.MO + t5.REF = 0 THEN 'VEP0'
                    WHEN t5.MO + t5.REF > 0 AND t5.MO + t5.REF <= 35000 THEN 'VEP1'
                    WHEN t5.MO + t5.REF > 35000 AND t5.MO + t5.REF <= 110000 THEN 'VEP2'
                    WHEN t5.MO + t5.REF > 110000 AND t5.MO + t5.REF <= 200000 THEN 'VEP3'
                    WHEN t5.MO + t5.REF > 200000 THEN 'VEP4'
                    ELSE ''
                END
        END) = 'V2 - 4 a 10 piezas' THEN 12.4
        WHEN (CASE 
            WHEN t1.TipoValuador = 'AUTOS' THEN
                CASE
                    WHEN t2.piezasautorizadas IS NULL THEN 'V0 - 0 piezas'
                    WHEN t2.piezasautorizadas > 0 AND t2.piezasautorizadas <= 3 THEN 'V1 - 1 a 3 piezas'
                    WHEN t2.piezasautorizadas > 3 AND t2.piezasautorizadas <= 10 THEN 'V2 - 4 a 10 piezas'
                    WHEN t2.piezasautorizadas > 10 AND t2.piezasautorizadas <= 23 THEN 'V3 - 11 a 23 piezas'
                    WHEN t2.piezasautorizadas > 23 THEN 'V4 - más de 24 piezas'
                    ELSE ''
                END
            WHEN t1.TipoValuador = 'EP' THEN
                CASE 
                    WHEN t5.MO + t5.REF = 0 THEN 'VEP0'
                    WHEN t5.MO + t5.REF > 0 AND t5.MO + t5.REF <= 35000 THEN 'VEP1'
                    WHEN t5.MO + t5.REF > 35000 AND t5.MO + t5.REF <= 110000 THEN 'VEP2'
                    WHEN t5.MO + t5.REF > 110000 AND t5.MO + t5.REF <= 200000 THEN 'VEP3'
                    WHEN t5.MO + t5.REF > 200000 THEN 'VEP4'
                    ELSE ''
                END
        END) = 'V3 - 11 a 23 piezas' THEN 24
        WHEN (CASE 
            WHEN t1.TipoValuador = 'AUTOS' THEN
                CASE
                    WHEN t2.piezasautorizadas IS NULL THEN 'V0 - 0 piezas'
                    WHEN t2.piezasautorizadas > 0 AND t2.piezasautorizadas <= 3 THEN 'V1 - 1 a 3 piezas'
                    WHEN t2.piezasautorizadas > 3 AND t2.piezasautorizadas <= 10 THEN 'V2 - 4 a 10 piezas'
                    WHEN t2.piezasautorizadas > 10 AND t2.piezasautorizadas <= 23 THEN 'V3 - 11 a 23 piezas'
                    WHEN t2.piezasautorizadas > 23 THEN 'V4 - más de 24 piezas'
                    ELSE ''
                END
            WHEN t1.TipoValuador = 'EP' THEN
                CASE 
                    WHEN t5.MO + t5.REF = 0 THEN 'VEP0'
                    WHEN t5.MO + t5.REF > 0 AND t5.MO + t5.REF <= 35000 THEN 'VEP1'
                    WHEN t5.MO + t5.REF > 35000 AND t5.MO + t5.REF <= 110000 THEN 'VEP2'
                    WHEN t5.MO + t5.REF > 110000 AND t5.MO + t5.REF <= 200000 THEN 'VEP3'
                    WHEN t5.MO + t5.REF > 200000 THEN 'VEP4'
                    ELSE ''
                END
        END) = 'V4 - más de 24 piezas' THEN 41
    END AS DIAS_META,
    t1.SUBRAMO,
    -- Calculation
    CASE
        WHEN t1.SUBRAMO = '01' THEN "AUTOS"
        WHEN t1.SUBRAMO = '02' THEN "EP"
        WHEN t1.SUBRAMO = '03' THEN "TURISTAS"
    END AS Calculation,
    -- GerenciaValuacion
    CASE 
        WHEN t1.TipoValuador = 'AUTOS' THEN 
            CASE   
                WHEN t1.EstadoCDR IN ('CHIHUAHUA', 'BAJA CALIFORNIA', 'BAJA CALIFORNIA SUR', 'SONORA', 'DURANGO') THEN 'NOROESTE'
                WHEN t1.EstadoCDR IN ('DURANGO', 'JALISCO', 'NAYARIT', 'COLIMA', 'SINALOA', 'ZACATECAS', 'AGUASCALIENTES', 'GUANAJUATO', 'MICHOACAN') THEN 'OCCIDENTE'
                WHEN t1.EstadoCDR IN ('CAMPECHE', 'OAXACA', 'TABASCO', 'YUCATAN', 'CHIAPAS', 'VERACRUZ', 'PUEBLA', 'QUINTANA ROO', 'TLAXCALA') THEN 'CENTRO SUR'
                WHEN t1.EstadoCDR IN ('CDMX I', 'REGION 15') THEN 'CENTRO'
                WHEN t1.EstadoCDR IN ('TAMAULIPAS', 'SAN LUIS POTOSI', 'NUEVO LEON', 'COAHUILA') THEN 'NORESTE'
                WHEN t1.EstadoCDR IN ('EDO. DE MEXICO', 'QUERETARO', 'HIDALGO', 'GUERRERO', 'MORELOS') THEN 'PERIFERIA'
                ELSE " "
            END
        WHEN t1.TipoValuador = 'EP' THEN
            CASE 
                WHEN t1.EstadoCDR IN ('CDMX I', 'EDO. DE MEXICO', 'GUERRERO', 'HIDALGO', 'MORELOS', 'PUEBLA', 'TLAXCALA') THEN 'CENTRO EP'
                WHEN t1.EstadoCDR IN ('AGUASCALIENTES', 'QUERETARO', 'SAN LUIS POTOSI', 'GUANAJUATO') THEN 'BAJIO EP'
                WHEN t1.EstadoCDR IN ('CHIHUAHUA', 'COAHUILA', 'DURANGO', 'NUEVO LEON', 'TAMAULIPAS', 'ZACATECAS') THEN 'NORTE EP'
                WHEN t1.EstadoCDR IN ('COLIMA', 'JALISCO', 'MICHOACAN', 'NAYARIT') THEN 'OCCIDENTE EP'
                WHEN t1.EstadoCDR IN ('BAJA CALIFORNIA', 'BAJA CALIFORNIA SUR', 'CAMPECHE', 'CHIAPAS', 'OAXACA', 'QUINTANA ROO', 'SINALOA', 'SONORA', 'TABASCO', 'VERACRUZ', 'YUCATAN') THEN 'PENINSULAR EP'
            END
    END AS GerenciaValuacion,
    -- PRO_ORDER
    CASE
        WHEN t1.CLAVETALLER IN (
            '09732', '11331', '06686', '06839', '07164', '07190', '07301', '07480', '07849', '08166',
            '50774', '50914', '50944', '50985', '51491', '52301', '52410', '52451', '52507', '52531',
            '52550', '52746', '97085', '97335', '97531', '97544', '04968', '05286', '05703', '12906',
            '13198', '14102', '14115', '14689', '14963', '15303', '15351', '15375', '15396', '16024',
            '57183', '57621', '61619', '61623', '61707', '97671', '98050', '98207', '98752', '00887',
            '00900', '01012', '01621', '01643', '02500', '03301', '03493', '04276', '04431', '04779',
            '50349', '50648', '50690', '50733', '01953', '16534', '16549', '16571', '16654', '16253',
            '16366', '16418', '16509', '12297', '01320', '12814', '50009', '50160', '50264', '52821',
            '16972', '16749', '17146', '16275', '57557', '17097', '50347', '12773', '17398', '14457',
            '96627', '17289', '17881', '98751', '17668', '17231', '18527', '18064', '18680', '18139',
            '02529', '17947', '18504', '18598', '18162', '18626', '18654', '18903', '19483', '19061',
            '19394', '18994', '19689', '19533', '19851', '19700', '19962', '19760', '19617', '20116',
            '20513', '20668', '21084', '20915', '21369', '52646', '21387', '21398', '20998', '21498',
            '05529', '19694', '22006', '21543', '21649', '21981', '21598', '21553', '21661', '22362',
            '22424', '22378', '22702', '23144', '22805', '23141', '22523', '23051', '23037', '25338',
            '23323', '23656', '24150', '22703', '27116', '25971', '22798', '23241', '23826', '25642',
            '24827', '25186', '23305', '23805', '25593', '26417', '24633', '26269', '23398', '25771',
            '26646', '23269', '03168', '05578', '22255', '23944', '26411', '24566', '25207', '25343',
            '61705', '23464', '24983', '23894', '26706', '13363', '25738', '25730', '26673', '11178',
            '27049', '27027', '23610', '19900', '21647', '23824', '22421', '22227', '23982', '23712',
            '22851', '26965', '25379', '27042', '24058', '18106', '26973', '22654', '25630', '26155',
            '23239', '25701', '23330', '25605', '27043', '26191', '26612', '23588', '24129', '24140',
            '23240', '27960', '15990', '29272', '29618', '28805', '28833', '06966', '28905', '29408',
            '27458', '27259', '27410', '28011', '27642', '27475', '20185', '27637', '28435', '28943',
            '29047', '12721', '29183', '30401', '28537', '28538', '30559', '27504', '27528', '30549',
            '14528', '29629', '02917', '27683', '29270', '28840', '27545', '28896', '27258', '23322',
            '30329', '27942', '30486', '29421', '29958', '29818', '27759', '04027', '16127', '30613',
            '28182', '29176', '29544', '27900', '29300', '28206', '29057', '29627', '28660', '28533',
            '28795', '98363', '30333', '22401', '29647', '27890', '27907', '52224', '28855', '29380',
            '03847', '30414', '28085', '29429', '30343', '28065', '30272', '28836', '28824', '30550',
            '27963', '27531', '29046', '28176', '28154', '30416', '29019', '31724', '33494', '31693',
            '33759', '33895', '33972', '31197', '33407', '33506', '31350', '33845', '33892', '32628',
            '33191', '09368', '31162', '33757', '32787', '32407', '33250', '34331', '31190', '33984',
            '34455', '30652', '32014', '31960', '31390', '33594', '32425', '33573', '32493', '34354',
            '33906', '34023', '33869', '32228', '33080', '34669', '33581', '31128', '31725', '33591',
            '34918', '35351', '35359', '35360', '31471', '31419', '32788', '33803', '31726', '33484',
            '32782', '32834', '33985', '34458', '33483', '33020', '31710', '30728', '33282', '33789',
            '34917', '33007', '32699', '33735', '33879', '34457', '34509', '34549', '33533', '34985',
            '32558', '34670', '32612', '31201', '32686', '32726', '34353', '32815', '33052', '35034',
            '32530', '33386', '34819', '34454', '35289', '37141', '37601', '37965', '38177', '40349',
            '40902', '40968', '37487', '38052', '38342', '38343', '39401', '35780', '38439', '38732',
            '39332', '39722', '40201', '38011', '38312', '38919', '40319', '40327', '40452', '40631',
            '40632', '37646', '39983', '40306', '40649', '40890', '36356', '40661', '36045', '38303',
            '38383', '36242', '37964', '36364', '38420', '38565', '39954', '41142', '36590', '37867',
            '38717', '38742', '39408', '39620', '40468', '36939', '37534', '38423', '39518', '35676',
            '37641', '38656', '37872', '38429', '39405', '39083', '39570', '39843', '40365', '40841',
            '41352', '36372', '37212', '37909', '37633', '38731', '39771', '41192', '39336', '39442',
            '41025', '36736', '39569', '38424', '38524', '41281', '37398', '37991', '39339', '39796',
            '37185', '37301', '39763', '41143', '38316', '40426', '37201', '37966', '38375', '38422',
            '39216', '40922', '36355', '38853', '39052', '40749', '40813', '37314', '37464', '38556',
            '39166', '39431', '37550', '38022', '38100', '40298', '40256', '40969', '40317', '36484',
            '39725', '40180', '40715', '36154', '36516', '38065', '40318', '40460', '40650', '41232',
            '38531', '38685', '36944', '37972', '39072', '39073', '35869', '36763', '37468', '37607',
            '40190', '37570', '38863', '40828', '37240', '37645', '37677', '37904', '38530', '38636',
            '35632', '39258', '40178', '40633', '39368', '40200', '41169', '35873', '35888', '35913',
            '40281', '41448', '37315', '41361', '36552', '38752', '41324', '38206', '38285', '38756',
            '40480', '37712', '36061', '38769', '39721', '38923', '37690', '38758', '38630', '39369',
            '36425', '40202', '37088', '40286', '36533', '36551', '37819', '38629', '41272', '36067',
            '37295', '38668', '38684', '40659', '36481', '36486', '37840', '40149', '38505', '38783',
            '39891', '41165', '41437', '37081', '38931', '40481', '41278', '35696', '35700', '36838',
            '38638', '38751', '40483', '38776', '38784', '39135', '41227', '38663', '40975', '35590',
            '36553', '36663', '41360', '37739', '36543', '37078', '38231', '39454', '41549', '36136',
            '36401', '40324', '40621', '40635', '37754', '39333', '40475', '36373', '41289', '38754',
            '38888', '38198', '41191', '36157', '35929', '35945', '38208', '37775', '38501', '38729',
            '38759', '39528', '36647', '36752', '40193', '40450', '41436',             '36091', '36092', '36052', '36398', '40378', '40751', '36407', '37097', '36664', '41094',
            '38757', '39889', '39712', '41090', '40320', '41239', '38637', '38640', '38252', '38213',
            '38229', '38276', '38652', '41089', '36631', '37293', '39453', '40155', '41222', '38650',
            '39524', '39469', '37359', '37815'
        ) THEN "PRO_ORDER" 
        ELSE "OTROS"
    END AS PRO_ORDER,
    t1.REAL_CE
FROM `STG_PREVENCION_FRAUDES.DG_SUPER_SERVICIO` t1
LEFT JOIN `STG_PREVENCION_FRAUDES.QUERY_FOR_TODASLASPIEZAS` t2 ON t1.idExp = t2.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.TotalTiemposValuacion` t3 ON t1.idExp = t3.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.ConsolidadoFechasPiezas` t4 ON t1.idExp = t4.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.CONSOLIDAMONTOS` t5 ON t1.idExp = t5.IDEXPEDIENTE
LEFT JOIN `STG_PREVENCION_FRAUDES.ExtraeExpedientesINVEST` t6 ON t1.idExp = t6.IDEXPEDIENTE
WHERE t1.EstatusValuacion IN ('', 'DAÑO MENOR AL DEDUCIBLE', 'PAGO DE DAÑOS', 'PERDIDA TOTAL', 'POSIBLE RESCATE', 'REPARACION', 'NO PROCEDE')
    AND t1.FECASIGNACION <= CURRENT_DATETIME() 
    AND t1.FECADJUDICACION <= CURRENT_DATETIME() 
    AND t1.FECENVIO <= CURRENT_DATETIME()
    AND t1.FecValuacion <= CURRENT_DATETIME() 
    AND t1.FECINGRESO <= CURRENT_DATETIME() 
    AND t1.FECTERMINADO <= CURRENT_DATETIME()
    AND t1.FECENTREGADO <= CURRENT_DATETIME()
    AND t3.ExpedienteDesviacion IS NOT NULL 
    AND t1.FECSINIESTRO >= DATETIME('2022-01-01 00:00:00');

-- Tabla final SUPERVISOR_CDR en DM_VERIFICACIONES
CREATE OR REPLACE TABLE `DM_VERIFICACIONES.SUPERVISOR_CDR` AS
SELECT 
    t1.idExp,
    t1.Ejercicio,
    t1.Reporte,
    t1.Siniestro,
    t1.CODAFECTADO,
    t1.TIPORIESGO,
    t1.CODIGOASEGURADO,
    t1.NUMPOLIZA,
    t1.NUMENDOSO,
    t1.NUMINCISO,
    t1.NOMCONDUCTOR,
    t1.CAUSA,
    t1.CAUSA_HOMOLOGADA,
    t1.CAUSACODIGO_DG,
    t1.CAUSADESCRIP_DG,
    t1.MarcaVehiculo,
    t1.TIPO,
    t1.MODELO,
    t1.Color,
    t1.PLACAS,
    t1.SERIE,
    t1.UNIDAD,
    t1.CLIENTE,
    t1.OFICINA,
    t1.GRUPO_NEGOCIO,
    t1.CVE_AGENTE,
    t1.Agente,
    t1.AGENTE_DG,
    t1.Gerente,
    t1.OficinaEmision,
    t1.Oficina_Emision_DG,
    t1.Ofi_Emi_DG,
    t1.OficinaSiniestros,
    t1.Director,
    t1.PRESUPUESTOMOB,
    t1.PIEZASCAMBIO,
    t1.SUMAASEG_DG,
    t1.MONTODEDUCIBLE_DG,
    t1.TRANSITO,
    t1.PISO,
    t1.Transito_Activo,
    t1.Piso_Activo,
    t1.GRUA,
    t1.Complemento,
    t1.CLAVETALLER,
    t1.Asignados,
    t1.Transitos,
    t1.Pisos,
    t1.Pendiente_Transito,
    t1.CODVALUADOR,
    t1.HerramientaValuacion,
    t1.EstatusValuacion,
    t1.TipoValuador,
    t1.Bandeja,
    t1.ExpedienteDesviacion,
    t1.MO,
    t1.REF,
    t1.FECSINIESTRO,
    t1.FECHAOCURRIDOSISE,
    t1.FECASIGNACION,
    t1.FECADJUDICACION,
    t1.Fec_Adjudicacion,
    t1.PrimerEnvioCDR,
    t1.FECENVIO,
    t1.FECVALUACION,
    t1.FecModificacion,
    t1.FECINGRESO,
    t1.Fec_Ingreso,
    t1.FECTERMINADO,
    t1.PRIMERTERMINO,
    t1.PRIMERENTREGA,
    t1.PRIMERTERMINO1,
    t1.Fec_Terminado,
    t1.FECENTREGADO,
    t1.FecPromesa1,
    t1.UltimoEnvioCDR,
    t1.FECAUTORIZACION,
    t1.PrimeraAutorizacion,
    t1.UltimaAutorizacion,
    t1.Reingreso_Portal,
    t1.PIEZASAUTORIZADAS,
    t1.PIEZASENTREGADAS,
    t1.DiasDifEnvioAutorizacion,
    t1.DIFDIASTERMINO,
    t1.FecAutMayor,
    t1.DiasReparacion,
    t1.DiasValuacion,
    t1.EstatusExpediente,
    t1.DiasEnv,
    t1.RegionValuacion,
    t1.EstadoCDR,
    t1.Pob_Comer,
    t1.CLAVESUPERVISOR,
    t1.NOMBRENNALISTA,
    t1.CLAVEANALISTA_SUPSERV,
    t1.NOMBRE_SUPERSERV,
    t1.TipoCDR_Portal,
    t1.TipoCDR,
    t1.MarcaCDR,
    t1.NombreCDR,
    t1.Nom_CDR_Comer,
    t1.TablaSupervisor,
    t1.CDRCOTIZADOR,
    t1.CDRAUTOSURTIDO,
    t1.FecPromesa,
    t1.CambioFecha,
    t1.CAMBIOTERMINO,
    t1.tiempoPrimerEnvio,
    t1.tiempoTallerComplementos,
    t1.tiempoTotalCDR,
    t1.TiempoPrimeraAutorizacion,
    t1.tiempoTotalAutorizacion,
    t1.TiempoAutorizacionComplementos,
    t1.TiempoPrimerCarrusel,
    t1.tiempoCarrComp,
    t1.tiempoTotalCarrusel,
    t1.tiempoPrimeraAutValuador,
    t1.tiempoCompAutValuador,
    t1.tiempoTotalAutValuador,
    t1.ENVIOS,
    t1.SUM_tEntregaPieza_Hab,
    t1.SUM_tEntregaPieza_Nat,
    t1.SUM_PiezaEntregada,
    t1.ExpValidoTiempos,
    t1.AAMM_Adj,
    t1.AAMM_Env,
    t1.ExpEnviado,
    t1.RankEnvio,
    t1.VehTerminado,
    t1.VehTerminadoPrimeraVez,
    t1.RankPromesa,
    t1.DiasPromesaVencida,
    t1.nExp,
    t1.tCorrido,
    t1.DiasRepReal_PrimerTermino,
    t1.DiasRepReal,
    t1.DifDiasRep,
    t1.CumplePromesa,
    t1.NoCumplePromesa,
    t1.CumplePromesa_PrimerTermino,
    t1.NoCumplePromesa_PrimerTermino,
    t1.PromesaVencida,
    t1.PromesaPorVencer,
    t1.Vencido,
    t1.EnTiempo,
    t1.VehiculoIngresado,
    t1.VehNoTerminado,
    t1.VehEntregado,
    t1.DiasSinTerminar,
    t1.DiasProceso,
    t1.MAS_30_DIAS,
    t1.DiasDesdeIngreso,
    t1.DifDiasRep_PrimerTermino,
    t1.CATEGORIAVALUACION,
    t1.tiempoPrimeraValuacion,
    t1.ExpedienteInvestigacion,
    t1.SinSiniestro,
    t1.TIPO_VE,
    t1.DIAS_META,
    t1.SUBRAMO,
    t1.Calculation,
    t1.GerenciaValuacion,
    t1.PRO_ORDER,
    -- GERENCIA_NAC
    CASE
        WHEN t1.GerenciaValuacion IN ('NORTE', 'PENINSULAR OCCIDENTE', 'OCCIDENTE') THEN "GERENCIA NACIONAL I - GABRIEL HERNANDEZ"
        WHEN t1.GerenciaValuacion IN ('CENTRO', 'CENTRO SUR', 'SURESTE') THEN "GERENCIA NACIONAL II - ISAAC GASCA"
        ELSE " "
    END AS GERENCIA_NAC,
    t2.CUENTA,
    t2.EJECUTIVA,
    t1.REAL_CE
FROM `STG_PREVENCION_FRAUDES.SUPERVISOR_` t1
LEFT JOIN `LAN_VERIFICACIONES.EJECUTIVAS_SEG` t2 ON t1.CVE_AGENTE = t2.CVE_AGENTE;

-- ==========================================
-- FIN DE LA TRADUCCIÓN
-- ==========================================

/*
NOTAS IMPORTANTES SOBRE LA TRADUCCIÓN:

1. Todas las funciones SAS INTCK se convirtieron a DATETIME_DIFF en BigQuery
2. Las funciones de fecha SAS se adaptaron a las equivalentes de BigQuery
3. El PROC TRANSPOSE se convirtió a operación PIVOT
4. Los data steps de enumeración se reemplazaron con ROW_NUMBER()
5. Las funciones IFN de SAS se convirtieron a CASE WHEN
6. Los nombres de tablas con caracteres especiales se normalizaron
7. Se respetaron los datasets especificados:
   - Tablas fuente: LAN_VERIFICACIONES
   - Tablas intermedias: STG_PREVENCION_FRAUDES
   - Tabla final: DM_VERIFICACIONES.SUPERVISOR_CDR

CONSIDERACIONES DE EJECUCIÓN:
- Ejecutar las consultas en orden secuencial
- Verificar que existan las tablas fuente antes de ejecutar
- Algunas consultas dependen de tablas intermedias creadas previamente
- La consulta final filtra por fechas desde 2022-01-01
*/