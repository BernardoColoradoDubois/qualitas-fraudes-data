
/* Librerias usadas */
/* Library assignment for SASApp.VALPROD */
Libname VALPROD META  REPNAME='Foundation' LIBURI="SASLibrary?*[@Name='Val Prod'][DeployedComponents/ServerContext[@Name='SASApp']]";
/* Library assignment for SASApp.BSC_SINI */
Libname BSC_SINI META  REPNAME='Foundation' LIBURI="SASLibrary?*[@Name='BSC SINIESTROS'][DeployedComponents/ServerContext[@Name='SASApp']]";
/* Library assignment for SASApp.CONVENB */
Libname CONVENB META  REPNAME='Foundation' LIBURI="SASLibrary?*[@Name='Convenios Base'][DeployedComponents/ServerContext[@Name='SASApp']]" METAOUT=DATA;
/* Library assignment for SASApp.INDBASE */
Libname INDBASE META  REPNAME='Foundation' LIBURI="SASLibrary?*[@Name='Indicadores Base'][DeployedComponents/ServerContext[@Name='SASApp']]" METAOUT=DATA;

/* se hace un primer extracción de VALPROD.CAUSACAMBIOVALE */
PROC SQL;
   CREATE TABLE DE_CAUSACAMBIOVALE AS 
   SELECT IDCAUSACAMBIOVALE LABEL='' AS IDCAUSACAMBIOVALE, 
          DESCRIPCION LABEL='' AS DESCRIPCION
      FROM VALPROD.CAUSACAMBIOVALE;
QUIT;

/* Extracción de VALPROD.COSTO con el concepto iagual a reffacion */
PROC SQL;
   CREATE TABLE DE_COSTO AS 
   SELECT IDCOSTO LABEL='' AS IDCOSTO, 
          LISTA LABEL='' AS LISTA, 
          BLINDAJE LABEL='' AS BLINDAJE, 
          CLAVENAGS LABEL='' AS CLAVENAGS, 
          MONTOCONVENIO LABEL='' AS MONTOCONVENIO
      FROM VALPROD.COSTO
      WHERE CONCEPTO = 'REF';
QUIT;

/* Hacemos lo mismo de arriba pero con los complementos */

PROC SQL;
   CREATE TABLE DE_COMPLEMENTO AS 
   SELECT IDCOMPLEMENTO LABEL='' AS IDCOMPLEMENTO, 
          LISTA LABEL='' AS LISTA, 
          BLINDAJE LABEL='' AS BLINDAJE, 
          CLAVENAGS LABEL='' AS CLAVENAGS, 
          MONTOCONVENIO LABEL='' AS MONTOCONVENIO
      FROM VALPROD.COMPLEMENTO
      WHERE CONCEPTO = 'REF';
QUIT;

/* sacamos información de VALPROD.VISTA_VALE*/

PROC SQL;
   CREATE TABLE WORK.DE_VISTA_VALE AS 
   SELECT IDEXPEDIENTE LABEL='' AS IDEXPEDIENTE, 
          IDVALE LABEL='' AS IDVALE, 
          CODPROVEEDOR LABEL='' AS CODPROVEEDOR, 
          FOLIO LABEL='' AS FOLIO, 
          FECHAEXPEDICION LABEL='' AS FECHAEXPEDICION, 
          FECHAACTUALIZACION LABEL='' AS FECHAACTUALIZACION, 
          AUTORIZADOR LABEL='' AS AUTORIZADOR, 
          IDVALEESTATUS LABEL='' AS IDVALEESTATUS
      FROM VALPROD.VISTA_VALE;
QUIT;

/* Extracción de VALPROD.VALEESTATUS */

PROC SQL;
   CREATE TABLE WORK.DE_VALEESTATUS AS 
   SELECT IDVALEESTATUS LABEL='' AS IDVALEESTATUS, 
          DESCRIPCION LABEL='' AS DESCRIPCION
      FROM VALPROD.VALEESTATUS;
QUIT;

/* Extracción de DE_VALEHISTORICO y creación de llavepieza  */

PROC SQL;
   CREATE TABLE DE_VALEHISTORICO AS 
   SELECT IDVALEHISTORICO LABEL='' AS IDVALEHISTORICO, 
          NUMPARTE LABEL='' AS NUMPARTE, 
          REFERENCIA LABEL='' AS REFERENCIA, 
          DESCRIPCION LABEL='' AS DESCRIPCION, 
          MONTO LABEL='' AS MONTO, 
          IDCOSTO LABEL='' AS IDCOSTO, 
          TIPO LABEL='' AS TIPO, 
          FECENVIO LABEL='' AS FECENVIO, 
          FECENTREGAREFACCIONARIA LABEL='' AS FECENTREGAREFACCIONARIA, 
          FECRECEPCION LABEL='' AS FECRECEPCION, 
          FECSURTIDO LABEL='' AS FECSURTIDO, 
          USUARIO LABEL='' AS USUARIO, 
          IDREFACCION LABEL='' AS IDREFACCION, 
          IDCAUSACAMBIOVALE LABEL='' AS IDCAUSACAMBIOVALE, 
          IDVALE LABEL='' AS IDVALE, 
          /* LLAVEPIEZA */
            (CATT(NUMPARTE,REFERENCIA,DESCRIPCION)) AS LLAVEPIEZA
      FROM VALPROD.VALEHISTORICO ;
QUIT;

/* Extracción de RELACIONCDR_SICDR */

PROC SQL;
   CREATE TABLE DE_RELACIONCDR_SICDR AS 
   SELECT CLAVETALLER LABEL='' AS CLAVETALLER, 
          IDSICDR LABEL='' AS IDSICDR
      FROM VALPROD.RELACIONCDR_SICDR;
QUIT;

/* Extracción de VALPROD.SUPERVISORINTEGRAL */
PROC SQL;
   CREATE TABLE WORK.DE_SUPERVISORINTEGRAL AS 
   SELECT CLAVESUPERVISOR LABEL='' AS CLAVESUPERVISOR, 
          NOMBRESUPERVISOR LABEL='' AS NOMBRESUPERVISOR, 
          IDREGIONGEOGRAFICA LABEL='' AS IDREGIONGEOGRAFICA, 
          IDSUPERVISORINTEGRAL LABEL='' AS IDSUPERVISORINTEGRAL
      FROM VALPROD.SUPERVISORINTEGRAL;
QUIT;

/* Extracción de VALPROD.DATOSGENERALES*/
PROC SQL;
   CREATE TABLE WORK.DE_DATOSGENERALES AS 
   SELECT IDEXPEDIENTE LABEL='' AS IDEXPEDIENTE, 
          EJERCICIO LABEL='' AS EJERCICIO, 
          NUMREPORTE LABEL='' AS NUMREPORTE, 
          NUMSINIESTRO LABEL='' AS NUMSINIESTRO, 
          CLAVETALLER LABEL='' AS CLAVETALLER, 
          CODVALUADOR LABEL='' AS CODVALUADOR, 
          IDVALUACION LABEL='' AS IDVALUACION
      FROM VALPROD.DATOSGENERALES;
QUIT;

/* Extracción de VALPROD.FECHAS */
PROC SQL;
   CREATE TABLE WORK.DE_FECHAS AS 
   SELECT IDEXPEDIENTE LABEL='' AS IDEXPEDIENTE, 
          FECVALUACION LABEL='' AS FECVALUACION, 
          FECTERMINADO LABEL='' AS FECTERMINADO, 
          FECENTREGADO LABEL='' AS FECENTREGADO
      FROM VALPROD.FECHAS;
QUIT;

/* Extracción de VALPROD.VALUACION */
PROC SQL;
   CREATE TABLE WORK.DE_VALUACION AS 
   SELECT IDVALUACION LABEL='' AS IDVALUACION, 
          DESCRIPCION LABEL='' AS DESCRIPCION
      FROM VALPROD.VALUACION;
QUIT;

/* Extracción de VALPROD.CERCO */
PROC SQL;
   CREATE TABLE WORK.DE_CERCO AS 
   SELECT IDENTIDAD LABEL='' AS IDENTIDAD, 
          NOMBRE LABEL='' AS NOMBRE
      FROM VALPROD.CERCO
      ORDER BY NOMBRE;
QUIT;

/* Extracción de VALPROD.ESTADO */
PROC SQL;
   CREATE TABLE WORK.DE_ESTADO AS 
   SELECT IDREGIONGEOGRAFICA LABEL='' AS IDREGIONGEOGRAFICA, 
          IDESTADO LABEL='' AS IDESTADO
      FROM VALPROD.ESTADO;
QUIT;

/* Extracción de VALPROD.VALUADOR */
PROC SQL;
   CREATE TABLE WORK.DE_VALUADOR AS 
   SELECT CODVALUADOR LABEL='' AS CODVALUADOR, 
          IDCATEGORIA LABEL='' AS IDCATEGORIA, 
          EQUIPOPESADO LABEL='' AS EQUIPOPESADO
      FROM VALPROD.VALUADOR;
QUIT;

/* Extracción de VALPROD.CATEGORIA */
PROC SQL;
   CREATE TABLE WORK.DE_CATEGORIA AS 
   SELECT t1.NOMBRE LABEL='' AS NOMBRE, 
          t1.IDCATEGORIA LABEL='' AS IDCATEGORIA
      FROM VALPROD.CATEGORIA t1;
QUIT;

/* Extracción de VALPROD.CATEGORIA */
PROC SQL;
   CREATE TABLE WORK.DE_DATOSVEHICULO AS 
   SELECT t1.IDEXPEDIENTE LABEL='' AS IDEXPEDIENTE, 
          t1.TIPO LABEL='' AS TIPO, 
          t1.MODELO LABEL='' AS MODELO, 
          t1.SERIE LABEL='' AS SERIE, 
          t1.IDMARCA LABEL='' AS IDMARCA
      FROM VALPROD.DATOSVEHICULO t1;
QUIT;

/* Extracción de VALPROD.MARCA*/
PROC SQL;
   CREATE TABLE WORK.DE_MARCA AS 
   SELECT t1.IDMARCA LABEL='' AS IDMARCA, 
          t1.DESCRIPCION LABEL='' AS DESCRIPCION
      FROM VALPROD.MARCA t1;
QUIT;

/* Extracción de VALPROD.ESTATUS */
PROC SQL;
   CREATE TABLE WORK.DE_ESTATUS AS 
   SELECT t1.IDEXPEDIENTE LABEL='' AS IDEXPEDIENTE, 
          t1.IDESTATUSEXPEDIENTE LABEL='' AS IDESTATUSEXPEDIENTE
      FROM VALPROD.ESTATUS t1;
QUIT;

/* Extracción de VALPROD.ESTATUSEXPEDIENTES */
PROC SQL;
   CREATE TABLE DE_ESTATUSEXPEDIENTES AS 
   SELECT IDESTATUSEXPEDIENTE LABEL='' AS IDESTATUSEXPEDIENTE, 
          DESCRIPCION LABEL='' AS DESCRIPCION
      FROM VALPROD.ESTATUSEXPEDIENTES;
QUIT;

/* Extracción de VALPROD.TALLERES */
PROC SQL;
   CREATE TABLE DE_TALLERES AS 
   SELECT IDTALLER LABEL='' AS IDTALLER, 
          IDOFICINA LABEL='' AS IDOFICINA, 
          CLAVETALLER LABEL='' AS CLAVETALLER, 
          NOMBRECOMERCIAL LABEL='' AS NOMBRECOMERCIAL, 
          IDENTIDAD LABEL='' AS IDENTIDAD, 
          TIPO LABEL='' AS TIPOCDR_PORTAL, 
          COTIZADOR LABEL='' AS CDRCOTIZADOR, 
          FRONTERIZO LABEL='' AS CDRAUTOSURTIDO, 
          IDESTADO LABEL='' AS IDESTADO
      FROM VALPROD.TALLERES;
QUIT;

/* Extracción de VALPROD.PROVEEDOR */
PROC SQL;
   CREATE TABLE DE_PROVEEDOR AS 
   SELECT CODPROVEEDOR LABEL='' AS CODPROVEEDOR, 
          NOMBRE LABEL='' AS NOMBREPROVEEDOR, 
          TIPO LABEL='' AS TIPOPROVEEDOR_PORTAL, 
          IDTIPOTOT LABEL='' AS IDTIPOTOT
      FROM VALPROD.PROVEEDOR ;
QUIT;

/* Extracción de VALPROD.TIPOTOT */
PROC SQL;
   CREATE TABLE DE_TIPOTOT AS 
   SELECT IDTIPOTOT LABEL='' AS IDTIPOTOT, 
          DESCRIPCION LABEL='' AS TIPOTOT
      FROM VALPROD.TIPOTOT ;
QUIT;

/* Extracción de BSC_SINI.Prestadores */
PROC SQL;
   CREATE TABLE WORK.ID_PRESTADORES_MARCA AS 
   SELECT Id LABEL='' AS Id, 
          Marca LABEL='' AS Marca, 
          Status LABEL='' AS Status, 
          Tipo LABEL='' AS Tipo, 
          POBCOMER LABEL='' AS POBCOMER
      FROM BSC_SINI.Prestadores;
QUIT;

/* Extracción de BSC_SINI.TESTADO_BSC */
PROC SQL;
   CREATE TABLE POB_COMER AS 
   SELECT Z_ID LABEL='' AS Z_ID, 
          EDOPOB LABEL='' AS EDOPOB
      FROM BSC_SINI.TESTADO_BSC ;
QUIT;

/* Extracción de BSC_SINI.tipoProveedor */
PROC SQL;
   CREATE TABLE ID_TIPOPROVEEDOR AS 
   SELECT id LABEL='' AS id, 
          'tipo proveedor'n LABEL='' AS 'tipo proveedor'n
      FROM BSC_SINI.tipoProveedor ;
QUIT;

/* Extracción de VALPROD.ENVIOHISTORICO */
PROC SQL;
   CREATE TABLE WORK.ENVIOHISTORICO_P AS 
   SELECT t1.IDEXPEDIENTE, 
          /* MIN_FEC_AUTORIZACION */
            (MIN(t1.FECHAAUTORIZACIONVALUADOR)) FORMAT=DATETIME27.6 AS MIN_FEC_AUTORIZACION
      FROM VALPROD.ENVIOHISTORICO t1
      WHERE t1.IDEXPEDIENTE NOT IS MISSING
      GROUP BY t1.IDEXPEDIENTE
      HAVING (CALCULATED MIN_FEC_AUTORIZACION) >= '01jan2019:0:0:0'dt;
QUIT;

/* Extracción de VALPROD.HISTORICOTERMINOENTREGA
	con tipofecha autorizada */
PROC SQL;
   CREATE TABLE WORK.AUTORIZACIONES AS 
   SELECT t1.IDEXPEDIENTE LABEL='' AS IDEXPEDIENTE, 
          t1.TIPOFECHA LABEL='' AS TIPOFECHA, 
          t1.FECHA LABEL='' AS FECHA
      FROM VALPROD.HISTORICOTERMINOENTREGA t1
      WHERE t1.TIPOFECHA CONTAINS ('AUTORIZA VAL') OR t1.TIPOFECHA CONTAINS ( 'AUTORIZACION VAL');
QUIT;

/* Se saca fecha minima de autorizacion de la tabla creada WORK.AUTORIZACIONES*/
PROC SQL;
   CREATE TABLE WORK.MIN_AUTORIZACION AS 
   SELECT IDEXPEDIENTE AS IDEXPEDIENTE, 
          /* MIN_FEC_AUTORIZACION */
            (MIN(FECHA)) FORMAT=DATETIME27.6 AS MIN_FEC_AUTORIZACION
      FROM AUTORIZACIONES t1
      GROUP BY IDEXPEDIENTE
      ORDER BY MIN_FEC_AUTORIZACION;
QUIT;

/* se hace la union de ENVIOHISTORICO_P y MIN_AUTORIZACION */
PROC SQL;
CREATE TABLE WORK.MIN_FEC_AUTORIZACION AS 
SELECT * FROM WORK.ENVIOHISTORICO_P
 OUTER UNION CORR 
SELECT * FROM WORK.MIN_AUTORIZACION
;
Quit;

/* Se hace un minimo en el MIN_FEC_AUTORIZACION de la union WORK.MIN_FEC_AUTORIZACION  */
PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_ENVIOHISTORICO AS 
   SELECT DISTINCT t1.IDEXPEDIENTE LABEL='' AS IDEXPEDIENTE, 
          /* MIN_of_FECHAAUTORIZACIONVALUADOR */
            (MIN(t1.MIN_FEC_AUTORIZACION)) FORMAT=DATETIME27.6 AS MIN_of_FECHAAUTORIZACIONVALUADOR
      FROM WORK.MIN_FEC_AUTORIZACION t1
      WHERE t1.IDEXPEDIENTE NOT IS MISSING
      GROUP BY t1.IDEXPEDIENTE
      HAVING (CALCULATED MIN_of_FECHAAUTORIZACIONVALUADOR) >= '01jan2019:0:0:0'dt
      ORDER BY MIN_of_FECHAAUTORIZACIONVALUADOR;
QUIT;

/* Se hace una union de datos entre ID_PRESTADORES_MARCA e ID_TIPOPROVEEDOR
	y ID_PRESTADORES_MARCA y POB_COMER*/
PROC SQL;
   CREATE TABLE WORK.PRESTADORES_POB_COMER_TIPO AS 
   SELECT t1.Id, 
          t3.EDOPOB AS Pob_Comer, 
          t1.Marca, 
          t2.'tipo proveedor'n, 
          t1.Status
      FROM WORK.ID_PRESTADORES_MARCA t1
           INNER JOIN WORK.ID_TIPOPROVEEDOR t2 ON (t1.Tipo = t2.id)
           LEFT JOIN WORK.POB_COMER t3 ON (t1.POBCOMER = t3.Z_ID);
QUIT;

/* Se hace la union entre DE_PROVEEDOR y DE_TIPOTOT por el IDTIPOTOT y 
	entre DE_PROVEEDOR y PRESTADORES_POB_COMER_TIPO por CODPROVEEDOR */
PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_PROVEEDOR AS 
   SELECT t1.CODPROVEEDOR AS CODPROVEEDOR, 
          t1.NOMBREPROVEEDOR AS NOMBREPROVEEDOR, 
          t1.TIPOPROVEEDOR_PORTAL AS TIPOPROVEEDOR_PORTAL, 
          t2.TIPOTOT AS TIPOTOT, 
          t3.Pob_Comer AS POBCOMERCIALPROVEEDOR, 
          t3.Marca AS MARCAPROVEEDOR_SISE, 
          t3.'tipo proveedor'n AS TIPOPROVEEDOR_SISE
      FROM WORK.DE_PROVEEDOR t1
           LEFT JOIN WORK.DE_TIPOTOT t2 ON (t1.IDTIPOTOT = t2.IDTIPOTOT)
           LEFT JOIN WORK.PRESTADORES_POB_COMER_TIPO t3 ON (t1.CODPROVEEDOR = t3.Id);
QUIT;

/* De la tabla que se creo DE_TALLERES se crean columnas y se ordena por la clavetaller */
PROC SQL;
   CREATE TABLE WORK.TAB_TALLERES AS 
   SELECT t1.IDTALLER, 
          t1.IDOFICINA, 
          t1.CLAVETALLER, 
          t1.NOMBRECOMERCIAL, 
          t1.IDENTIDAD, 
          t1.TIPOCDR_PORTAL, 
          t1.CDRCOTIZADOR, 
          t1.CDRAUTOSURTIDO, 
          t1.IDESTADO, 
          /* IDENTIDAD_ANTERIOR */
            (' ') AS IDENTIDAD_ANTERIOR, 
          /* CERCO_ANTERIOR */
            (' ') AS CERCO_ANTERIOR
      FROM WORK.DE_TALLERES t1
      ORDER BY t1.CLAVETALLER;
QUIT;

/* Se hace una union entre DE_ESTATUS y DE_ESTATUSEXPEDIENTES por IDESTATUSEXPEDIENTE */

PROC SQL;
   CREATE TABLE WORK.ESTATUS_DEL_EXPEDIENTE AS 
   SELECT t1.IDEXPEDIENTE, 
          t2.DESCRIPCION AS ESTATUSEXPEDIENTE
      FROM WORK.DE_ESTATUS t1
           LEFT JOIN WORK.DE_ESTATUSEXPEDIENTES t2 ON (t1.IDESTATUSEXPEDIENTE = t2.IDESTATUSEXPEDIENTE);
QUIT;

/* Se hace una union entre DE_DATOSVEHICULO y DE_MARCA por IDMARCA */
PROC SQL;
   CREATE TABLE WORK.DATOS_DEL_VEH_CON_MARCA AS 
   SELECT t1.IDEXPEDIENTE, 
          t1.TIPO AS TIPOVEHICULO, 
          t1.MODELO, 
          t1.SERIE, 
          t2.DESCRIPCION AS MARCAVEHICULO
      FROM WORK.DE_DATOSVEHICULO t1
           LEFT JOIN WORK.DE_MARCA t2 ON (t1.IDMARCA = t2.IDMARCA);
QUIT;

/* Se hace la union entre DE_VALUADOR y DE_CATEGORIA por IDCATEGORIA aparte de que de crea la 
	columna TIPOVALUADOR ayudada con EQUIPOPESADO */
PROC SQL;
   CREATE TABLE WORK.CATEGORIA_VALUADOR AS 
   SELECT t1.CODVALUADOR, 
          t1.IDCATEGORIA, 
          t1.EQUIPOPESADO, 
          t2.NOMBRE AS CATEGORIAVALUADOR, 
          /* TIPOVALUADOR */
            (IFC(t1.EQUIPOPESADO=1, "EQUIPO PESADO", "AUTOS")) AS TIPOVALUADOR
      FROM WORK.DE_VALUADOR t1
           LEFT JOIN WORK.DE_CATEGORIA t2 ON (t1.IDCATEGORIA = t2.IDCATEGORIA);
QUIT;

/* Se hace una union entre DE_DATOSGENERALES y DE_RELACIONCDR_SICDR por CLAVETALLER y 
	DE_DATOSGENERALES y DE_SUPERVISORINTEGRAL por IDSICDR*/
PROC SQL;
   CREATE TABLE WORK.ANALISTA_CDR AS 
   SELECT DISTINCT t3.CLAVESUPERVISOR AS CLAVESUPERVISOR, 
          t3.NOMBRESUPERVISOR AS ANALISTACDR, 
          t2.CLAVETALLER AS CLAVETALLER, 
          t3.IDREGIONGEOGRAFICA AS IDREGIONGEOGRAFICA
      FROM WORK.DE_DATOSGENERALES t1
           LEFT JOIN WORK.DE_RELACIONCDR_SICDR t2 ON (t1.CLAVETALLER = t2.CLAVETALLER)
           LEFT JOIN WORK.DE_SUPERVISORINTEGRAL t3 ON (t2.IDSICDR = t3.IDSUPERVISORINTEGRAL)
      ORDER BY t3.CLAVESUPERVISOR;
QUIT;

/* Se hace union de varias tablas ya creadas anteriormente y limpieza de DESCRIPCION */
PROC SQL;
   CREATE TABLE WORK.CONCENTRADO_1 AS 
   SELECT t1.IDEXPEDIENTE, 
          /* NUMVALUACION */
            (SUBSTR(t2.NUMEXPEDIENTE,1,14)) AS NUMVALUACION, 
          t1.MIN_of_FECHAAUTORIZACIONVALUADOR, 
          t3.EJERCICIO, 
          t3.NUMREPORTE, 
          t3.NUMSINIESTRO, 
          /* ESTATUSVALUACION */
            (compress(t4.DESCRIPCION,"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'~!@#$%^&*()-_=+\|[] {};:',.<>?/" , "kis")
            
            ) AS ESTATUSVALUACION, 
          t3.CLAVETALLER, 
          /* NOMBRECDR */
            (SUBSTR(t5.NOMBRECOMERCIAL,7)) AS NOMBRECDR, 
          t5.TIPOCDR_PORTAL, 
          t5.CDRCOTIZADOR, 
          t5.CDRAUTOSURTIDO, 
          t5.CERCO_ANTERIOR, 
          t3.CODVALUADOR, 
          t6.FECVALUACION, 
          t6.FECTERMINADO, 
          t6.FECENTREGADO, 
          t3.IDVALUACION, 
          t5.IDTALLER, 
          t5.IDENTIDAD, 
          t5.IDOFICINA, 
          t5.IDESTADO
      FROM WORK.QUERY_FOR_ENVIOHISTORICO t1
           LEFT JOIN VALPROD.EXPEDIENTE t2 ON (t1.IDEXPEDIENTE = t2.IDEXPEDIENTE)
           LEFT JOIN WORK.DE_DATOSGENERALES t3 ON (t1.IDEXPEDIENTE = t3.IDEXPEDIENTE)
           LEFT JOIN WORK.DE_VALUACION t4 ON (t3.IDVALUACION = t4.IDVALUACION)
           LEFT JOIN WORK.TAB_TALLERES t5 ON (t3.CLAVETALLER = t5.CLAVETALLER)
           LEFT JOIN WORK.DE_FECHAS t6 ON (t1.IDEXPEDIENTE = t6.IDEXPEDIENTE);
QUIT;

/* Se hace más uniones con otras tablas hechas anteriormente */
PROC SQL;
   CREATE TABLE WORK.CON_STATUS_EXP_CONCENTRADO_1 AS 
   SELECT t1.IDEXPEDIENTE, 
          t1.NUMVALUACION, 
          t1.MIN_of_FECHAAUTORIZACIONVALUADOR, 
          t1.EJERCICIO, 
          t1.NUMREPORTE, 
          t1.NUMSINIESTRO, 
          t2.ESTATUSEXPEDIENTE, 
          t1.ESTATUSVALUACION, 
          t4.MARCAVEHICULO, 
          t4.TIPOVEHICULO, 
          t4.MODELO, 
          t4.SERIE, 
          t1.CLAVETALLER, 
          t1.NOMBRECDR, 
          t1.TIPOCDR_PORTAL, 
          t3.NOMBRE AS CERCO, 
          t1.CERCO_ANTERIOR, 
          t1.CODVALUADOR, 
          t1.FECVALUACION, 
          t1.FECTERMINADO, 
          t1.FECENTREGADO, 
          t5.TIPOVALUADOR, 
          t5.CATEGORIAVALUADOR, 
          t1.IDVALUACION, 
          t1.CDRCOTIZADOR, 
          t1.CDRAUTOSURTIDO, 
          t1.IDESTADO
      FROM WORK.CONCENTRADO_1 t1
           LEFT JOIN WORK.ESTATUS_DEL_EXPEDIENTE t2 ON (t1.IDEXPEDIENTE = t2.IDEXPEDIENTE)
           LEFT JOIN WORK.DE_CERCO t3 ON (t1.IDENTIDAD = t3.IDENTIDAD)
           LEFT JOIN WORK.DATOS_DEL_VEH_CON_MARCA t4 ON (t1.IDEXPEDIENTE = t4.IDEXPEDIENTE)
           LEFT JOIN WORK.CATEGORIA_VALUADOR t5 ON (t1.CODVALUADOR = t5.CODVALUADOR);
QUIT;

/* Se hace más uniones enre otras tablas y se creaotras columnas y se renombra otras */
PROC SQL;
   CREATE TABLE WORK.CONCENTRADO AS 
   SELECT t1.IDEXPEDIENTE, 
          t1.NUMVALUACION, 
          t1.MIN_of_FECHAAUTORIZACIONVALUADOR, 
          t1.EJERCICIO, 
          t1.NUMREPORTE, 
          t1.NUMSINIESTRO, 
          t1.ESTATUSEXPEDIENTE, 
          t1.ESTATUSVALUACION, 
          t1.MARCAVEHICULO, 
          t1.TIPOVEHICULO, 
          t1.MODELO, 
          t1.SERIE, 
          t1.CLAVETALLER, 
          t1.NOMBRECDR, 
          t3.'tipo proveedor'n AS TIPOCDR_SISE, 
          t3.Marca AS MARCACDR_SISE, 
          t1.TIPOCDR_PORTAL, 
          t3.Pob_Comer AS POBCOMERCDR, 
          t2.IDREGIONGEOGRAFICA, 
          t1.CDRCOTIZADOR, 
          t1.CDRAUTOSURTIDO, 
          /* GERENCIAVALUACION */
            (CASE
            WHEN t2.IDREGIONGEOGRAFICA IN (1,2,9,11) THEN 'NORTE'
            WHEN t2.IDREGIONGEOGRAFICA IN (4,5,7,10) THEN 'CENTRO'
            WHEN t2.IDREGIONGEOGRAFICA IN (3,6,8,12) THEN 'OCCIDENTE'
            ELSE 'SIN GERENCIA'
            END) AS GERENCIAVALUACION, 
          t1.CERCO, 
          t1.CERCO_ANTERIOR, 
          t1.CODVALUADOR, 
          t1.FECVALUACION, 
          t1.FECTERMINADO, 
          t1.FECENTREGADO, 
          /* VEHICULOTERMINADO */
            (IFN(t1.FECTERMINADO NOT IS MISSING,1,0)) AS VEHICULOTERMINADO, 
          t1.TIPOVALUADOR, 
          t1.CATEGORIAVALUADOR
      FROM WORK.CON_STATUS_EXP_CONCENTRADO_1 t1
           LEFT JOIN WORK.DE_ESTADO t2 ON (t1.IDESTADO = t2.IDESTADO)
           LEFT JOIN WORK.PRESTADORES_POB_COMER_TIPO t3 ON (t1.CLAVETALLER = t3.Id);
QUIT;

/* Se define con que variables que se quedan y se hace una union 
	entre CONCENTRADO y ANALISTA_CDR  por CLAVETALLER */
PROC SQL;
   CREATE TABLE WORK.ENVIOHISTORICO_CN_ANALISTACDR AS 
   SELECT t1.IDEXPEDIENTE, 
          t1.NUMVALUACION, 
          t1.MIN_of_FECHAAUTORIZACIONVALUADOR, 
          t1.EJERCICIO, 
          t1.NUMREPORTE, 
          t1.NUMSINIESTRO, 
          t1.ESTATUSEXPEDIENTE, 
          t1.ESTATUSVALUACION, 
          t1.MARCAVEHICULO, 
          t1.TIPOVEHICULO, 
          t1.MODELO, 
          t1.SERIE, 
          t1.CLAVETALLER, 
          t1.NOMBRECDR, 
          t1.TIPOCDR_SISE, 
          t1.MARCACDR_SISE, 
          t1.TIPOCDR_PORTAL, 
          t1.POBCOMERCDR, 
          t1.IDREGIONGEOGRAFICA, 
          t1.CDRCOTIZADOR, 
          t1.CDRAUTOSURTIDO, 
          t1.GERENCIAVALUACION, 
          t1.CERCO, 
          t1.CERCO_ANTERIOR, 
          t1.CODVALUADOR, 
          t1.FECVALUACION, 
          t1.FECTERMINADO, 
          t1.FECENTREGADO, 
          t1.VEHICULOTERMINADO, 
          t1.TIPOVALUADOR, 
          t1.CATEGORIAVALUADOR, 
          t2.ANALISTACDR
      FROM WORK.CONCENTRADO t1
           LEFT JOIN WORK.ANALISTA_CDR t2 ON (t1.CLAVETALLER = t2.CLAVETALLER);
QUIT;

/* Se hace el cruce de info entre QUERY_FOR_ENVIOHISTORICO y DE_VISTA_VALE por IDEXPEDIENTE,
	tambien QUERY_FOR_ENVIOHISTORICO y DE_VALEESTATUS por IDVALEESTATUS
	y entre QUERY_FOR_ENVIOHISTORICO y QUERY_FOR_PROVEEDOR por CODPROVEEDOR */
PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_ENVIOHISTORICO_0001 AS 
   SELECT t2.IDEXPEDIENTE AS IDEXPEDIENTE, 
          t2.IDVALE AS IDVALE, 
          t2.CODPROVEEDOR AS CODPROVEEDOR, 
          t4.NOMBREPROVEEDOR AS NOMBREPROVEEDOR, 
          t4.TIPOPROVEEDOR_PORTAL AS TIPOPROVEEDOR_PORTAL, 
          t4.TIPOTOT AS TIPOTOT, 
          t4.POBCOMERCIALPROVEEDOR AS POBCOMERCIALPROVEEDOR, 
          t4.TIPOPROVEEDOR_SISE AS TIPOPROVEEDOR_SISE, 
          t4.MARCAPROVEEDOR_SISE AS MARCAPROVEEDOR_SISE, 
          t2.FOLIO AS FOLIO, 
          t2.FECHAEXPEDICION AS FECHAEXPEDICION, 
          t2.FECHAACTUALIZACION AS FECHAACTUALIZACION, 
          t3.DESCRIPCION AS ESTATUSVALE, 
          t2.AUTORIZADOR AS AUTORIZADOR
      FROM WORK.QUERY_FOR_ENVIOHISTORICO t1
           INNER JOIN WORK.DE_VISTA_VALE t2 ON (t1.IDEXPEDIENTE = t2.IDEXPEDIENTE)
           LEFT JOIN WORK.DE_VALEESTATUS t3 ON (t2.IDVALEESTATUS = t3.IDVALEESTATUS)
           LEFT JOIN WORK.QUERY_FOR_PROVEEDOR t4 ON (t2.CODPROVEEDOR = t4.CODPROVEEDOR);
QUIT;

/* Se hace el cruce de info entre QUERY_FOR_ENVIOHISTORICO_0001 y DE_VALEHISTORICO por IDVALE 
	con el IDCOSTO no sea vacio y la FECHAEXPEDICION >= '1Jan2023:0:0:0'dt */
PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_ENVIOHISTORICO1 AS 
   SELECT t1.IDEXPEDIENTE AS IDEXPEDIENTE, 
          t2.IDVALEHISTORICO AS IDVALEHISTORICO, 
          t1.IDVALE AS IDVALE, 
          t1.CODPROVEEDOR AS CODPROVEEDOR, 
          t1.NOMBREPROVEEDOR AS NOMBREPROVEEDOR, 
          t1.TIPOPROVEEDOR_PORTAL AS TIPOPROVEEDOR_PORTAL, 
          t1.TIPOTOT AS TIPOTOT, 
          t1.POBCOMERCIALPROVEEDOR AS POBCOMERCIALPROVEEDOR, 
          t1.TIPOPROVEEDOR_SISE AS TIPOPROVEEDOR_SISE, 
          t1.MARCAPROVEEDOR_SISE AS MARCAPROVEEDOR_SISE, 
          t1.FOLIO AS FOLIO, 
          t2.NUMPARTE AS NUMPARTE, 
          t2.REFERENCIA AS REFERENCIA, 
          t2.DESCRIPCION AS DESCRIPCIONREFACCION, 
          t2.MONTO AS MONTO, 
          t2.IDCOSTO AS IDCOSTO, 
          t2.TIPO AS TIPO, 
          t1.FECHAEXPEDICION AS FECHAEXPEDICION, 
          t2.FECENVIO AS FECENVIO, 
          t2.FECENTREGAREFACCIONARIA AS FECENTREGAREFACCIONARIA, 
          t2.FECRECEPCION AS FECRECEPCION, 
          t2.FECSURTIDO AS FECPROMESAENTREGA, 
          t1.FECHAACTUALIZACION AS FECHAACTUALIZACION, 
          t2.USUARIO AS USUARIO, 
          t1.AUTORIZADOR AS AUTORIZADOR, 
          t1.ESTATUSVALE AS ESTATUSVALE, 
          t2.IDCAUSACAMBIOVALE AS IDCAUSACAMBIOVALE, 
          /* ORIGEN */
            (CASE
            WHEN t2.IDREFACCION = '01' THEN 'ORIGINAL'
            WHEN t2.IDREFACCION = '02' THEN 'ORIG. USADO'
            WHEN t2.IDREFACCION = '03' THEN 'ALTERNATIVO'
            WHEN t2.IDREFACCION = '04' THEN 'TOT'
            WHEN t2.IDREFACCION = '05' THEN 'NACIONAL'
            WHEN t2.IDREFACCION = '06' THEN 'DESMONTADO'
            WHEN t2.IDREFACCION = '07' THEN 'REMANUFACTURADO'
            WHEN t2.IDREFACCION IS MISSING THEN 'SIN ORIGEN'
            END) AS ORIGEN, 
          t2.LLAVEPIEZA
      FROM WORK.QUERY_FOR_ENVIOHISTORICO_0001 t1
           LEFT JOIN WORK.DE_VALEHISTORICO t2 ON (t1.IDVALE = t2.IDVALE)
      WHERE t2.IDCOSTO NOT IS MISSING AND t1.FECHAEXPEDICION >= '1Jan2023:0:0:0'dt;
QUIT;

/* Se trae la DESCRIPCION de DE_CAUSACAMBIOVALE por IDCAUSACAMBIOVALE 
	y se renombra a CAUSACAMBIOVALE */
PROC SQL;
   CREATE TABLE WORK.VALE_CAUSA_CAMBIO AS 
   SELECT t1.IDEXPEDIENTE AS IDEXPEDIENTE, 
          t1.IDVALEHISTORICO AS IDVALEHISTORICO, 
          t1.IDVALE AS IDVALE, 
          t1.CODPROVEEDOR AS CODPROVEEDOR, 
          t1.NOMBREPROVEEDOR AS NOMBREPROVEEDOR, 
          t1.TIPOPROVEEDOR_PORTAL AS TIPOPROVEEDOR_PORTAL, 
          t1.TIPOTOT AS TIPOTOT, 
          t1.POBCOMERCIALPROVEEDOR AS POBCOMERCIALPROVEEDOR, 
          t1.TIPOPROVEEDOR_SISE AS TIPOPROVEEDOR_SISE, 
          t1.MARCAPROVEEDOR_SISE AS MARCAPROVEEDOR_SISE, 
          t1.FOLIO AS FOLIO, 
          t1.NUMPARTE AS NUMPARTE, 
          t1.REFERENCIA AS REFERENCIA, 
          t1.DESCRIPCIONREFACCION AS DESCRIPCIONREFACCION, 
          t1.MONTO AS MONTO, 
          t1.IDCOSTO AS IDCOSTO, 
          t1.TIPO AS TIPO, 
          t1.FECHAEXPEDICION AS FECHAEXPEDICION, 
          t1.FECENVIO AS FECENVIO, 
          t1.FECENTREGAREFACCIONARIA AS FECENTREGAREFACCIONARIA, 
          t1.FECRECEPCION AS FECRECEPCION, 
          t1.FECPROMESAENTREGA AS FECPROMESAENTREGA, 
          t1.FECHAACTUALIZACION AS FECHAACTUALIZACION, 
          t1.USUARIO AS USUARIO, 
          t1.AUTORIZADOR AS AUTORIZADOR, 
          t1.ESTATUSVALE AS ESTATUSVALE, 
          t1.ORIGEN AS ORIGEN, 
          t2.DESCRIPCION AS CAUSACAMBIOVALE
      FROM WORK.QUERY_FOR_ENVIOHISTORICO1 t1
           LEFT JOIN WORK.DE_CAUSACAMBIOVALE t2 ON (t1.IDCAUSACAMBIOVALE = t2.IDCAUSACAMBIOVALE);
QUIT;

/* Se hace un inner join entre VALE_CAUSA_CAMBIO y DE_COSTO por IDCOSTO y que TIPO = 'COSTO'*/
PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_ENVIOHISTORICO1_0003 AS 
   SELECT t1.IDEXPEDIENTE AS IDEXPEDIENTE, 
          t1.IDVALEHISTORICO AS IDVALEHISTORICO, 
          t1.IDVALE AS IDVALE, 
          t1.CODPROVEEDOR AS CODPROVEEDOR, 
          t1.NOMBREPROVEEDOR AS NOMBREPROVEEDOR, 
          t1.TIPOPROVEEDOR_PORTAL AS TIPOPROVEEDOR_PORTAL, 
          t1.TIPOTOT AS TIPOTOT, 
          t1.POBCOMERCIALPROVEEDOR AS POBCOMERCIALPROVEEDOR, 
          t1.TIPOPROVEEDOR_SISE AS TIPOPROVEEDOR_SISE, 
          t1.MARCAPROVEEDOR_SISE AS MARCAPROVEEDOR_SISE, 
          t1.FOLIO AS FOLIO, 
          t1.NUMPARTE AS NUMPARTE, 
          t1.REFERENCIA AS REFERENCIA, 
          t1.DESCRIPCIONREFACCION AS DESCRIPCIONREFACCION, 
          t1.MONTO AS MONTO, 
          t1.IDCOSTO AS IDCOSTO, 
          t1.TIPO AS TIPO, 
          t1.FECHAEXPEDICION AS FECHAEXPEDICION, 
          t1.FECENVIO AS FECENVIO, 
          t1.FECENTREGAREFACCIONARIA AS FECENTREGAREFACCIONARIA, 
          t1.FECRECEPCION AS FECRECEPCION, 
          t1.FECPROMESAENTREGA AS FECPROMESAENTREGA, 
          t1.FECHAACTUALIZACION AS FECHAACTUALIZACION, 
          t1.USUARIO AS USUARIO, 
          t1.AUTORIZADOR AS AUTORIZADOR, 
          t1.ESTATUSVALE AS ESTATUSVALE, 
          t1.ORIGEN AS ORIGEN, 
          t1.CAUSACAMBIOVALE AS CAUSACAMBIOVALE, 
          t2.LISTA AS LISTA, 
          t2.BLINDAJE AS BLINDAJE, 
          t2.CLAVENAGS AS CLAVENAGS, 
          t2.MONTOCONVENIO AS MONTOCONVENIO
      FROM WORK.VALE_CAUSA_CAMBIO t1
           INNER JOIN WORK.DE_COSTO t2 ON (t1.IDCOSTO = t2.IDCOSTO AND (t1.TIPO = 'COSTO'));
QUIT;

/* Se hace la parte de arriba pero del complemento
   un inner join entre VALE_CAUSA_CAMBIO y DE_COSTO por IDCOSTO y que TIPO = 'COMPLEMENTO' */
PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_ENVIOHISTORICO1_0004 AS 
   SELECT t1.IDEXPEDIENTE AS IDEXPEDIENTE, 
          t1.IDVALEHISTORICO AS IDVALEHISTORICO, 
          t1.IDVALE AS IDVALE, 
          t1.CODPROVEEDOR AS CODPROVEEDOR, 
          t1.NOMBREPROVEEDOR AS NOMBREPROVEEDOR, 
          t1.TIPOPROVEEDOR_PORTAL AS TIPOPROVEEDOR_PORTAL, 
          t1.TIPOTOT AS TIPOTOT, 
          t1.POBCOMERCIALPROVEEDOR AS POBCOMERCIALPROVEEDOR, 
          t1.TIPOPROVEEDOR_SISE AS TIPOPROVEEDOR_SISE, 
          t1.MARCAPROVEEDOR_SISE AS MARCAPROVEEDOR_SISE, 
          t1.FOLIO AS FOLIO, 
          t1.NUMPARTE AS NUMPARTE, 
          t1.REFERENCIA AS REFERENCIA, 
          t1.DESCRIPCIONREFACCION AS DESCRIPCIONREFACCION, 
          t1.MONTO AS MONTO, 
          t1.IDCOSTO AS IDCOSTO, 
          t1.TIPO AS TIPO, 
          t1.FECHAEXPEDICION AS FECHAEXPEDICION, 
          t1.FECENVIO AS FECENVIO, 
          t1.FECENTREGAREFACCIONARIA AS FECENTREGAREFACCIONARIA, 
          t1.FECRECEPCION AS FECRECEPCION, 
          t1.FECPROMESAENTREGA AS FECPROMESAENTREGA, 
          t1.FECHAACTUALIZACION AS FECHAACTUALIZACION, 
          t1.USUARIO AS USUARIO, 
          t1.AUTORIZADOR AS AUTORIZADOR, 
          t1.ESTATUSVALE AS ESTATUSVALE, 
          t1.ORIGEN AS ORIGEN, 
          t1.CAUSACAMBIOVALE AS CAUSACAMBIOVALE, 
          t2.LISTA AS LISTA, 
          t2.BLINDAJE AS BLINDAJE, 
          t2.CLAVENAGS AS CLAVENAGS, 
          t2.MONTOCONVENIO AS MONTOCONVENIO
      FROM WORK.VALE_CAUSA_CAMBIO t1
           INNER JOIN WORK.DE_COMPLEMENTO t2 ON (t1.IDCOSTO = t2.IDCOMPLEMENTO AND (t1.TIPO = 'COMPLEMENTO'));
QUIT;

/* se hace la union entre el costo y el complemento */
PROC SQL;
CREATE TABLE WORK.Append_Table AS 
SELECT * FROM WORK.QUERY_FOR_ENVIOHISTORICO1_0003
 OUTER UNION CORR 
SELECT * FROM WORK.QUERY_FOR_ENVIOHISTORICO1_0004
;
Quit;

/* SE saca la fecha minima de FECHAEXPEDICION y el maximo de FECENTREGAREFACCIONARIA
	y creación de llave concatenando entre NUMPARTE, REFERENCIA y DESCRIPCIONREFACCION */
PROC SQL;
   CREATE TABLE WORK.FECEXP_FECENTREGA_TE AS 
   SELECT DISTINCT t1.IDEXPEDIENTE, 
          t1.CODPROVEEDOR, 
          /* LLAVEPIEZA */
            (CATT(t1.NUMPARTE,t1.REFERENCIA,t1.DESCRIPCIONREFACCION)) AS LLAVEPIEZA, 
          /* MIN_of_FECHAEXPEDICION */
            (MIN(t1.FECHAEXPEDICION)) FORMAT=DATETIME27.6 AS MIN_of_FECHAEXPEDICION, 
          /* MAX_of_FECENTREGAREFACCIONARIA */
            (MAX(t1.FECENTREGAREFACCIONARIA)) FORMAT=DATETIME27.6 AS MAX_of_FECENTREGAREFACCIONARIA, 
          t1.NUMPARTE, 
          t1.REFERENCIA, 
          t1.DESCRIPCIONREFACCION
      FROM WORK.APPEND_TABLE t1
      GROUP BY t1.IDEXPEDIENTE,
               t1.CODPROVEEDOR,
               (CALCULATED LLAVEPIEZA),
               t1.NUMPARTE,
               t1.REFERENCIA,
               t1.DESCRIPCIONREFACCION;
QUIT;

/* Se calcula el intrvalo entre la fecha de MIN_of_FECHAEXPEDICION y MIN_of_FECHAEXPEDICION */
PROC SQL;
   CREATE TABLE WORK.TE AS 
   SELECT t1.IDEXPEDIENTE, 
          t1.CODPROVEEDOR, 
          t1.LLAVEPIEZA, 
          /* TIEMPOENTREGA */
            (INTCK('DTWEEKDAY1W',t1.MIN_of_FECHAEXPEDICION,t1.MAX_of_FECENTREGAREFACCIONARIA)) AS TIEMPOENTREGA, 
          t1.NUMPARTE, 
          t1.REFERENCIA, 
          t1.DESCRIPCIONREFACCION
      FROM WORK.FECEXP_FECENTREGA_TE t1;
QUIT;

/* Se hace un cruce de entre APPEND_TABLE y TE */
PROC SQL;
   CREATE TABLE WORK.APPEND_TABLE_TE AS 
   SELECT t1.IDEXPEDIENTE, 
          t1.IDVALEHISTORICO, 
          t1.IDVALE, 
          t1.CODPROVEEDOR, 
          t1.NOMBREPROVEEDOR, 
          t1.TIPOPROVEEDOR_PORTAL, 
          t1.TIPOTOT, 
          t1.POBCOMERCIALPROVEEDOR, 
          t1.TIPOPROVEEDOR_SISE, 
          t1.MARCAPROVEEDOR_SISE, 
          t1.FOLIO, 
          t1.NUMPARTE, 
          t1.REFERENCIA, 
          t1.DESCRIPCIONREFACCION, 
          t1.MONTO, 
          t1.IDCOSTO, 
          t1.TIPO, 
          t1.FECHAEXPEDICION, 
          t1.FECENVIO, 
          t1.FECENTREGAREFACCIONARIA, 
          t1.FECRECEPCION, 
          t1.FECPROMESAENTREGA, 
          t1.FECHAACTUALIZACION, 
          t1.USUARIO, 
          t1.AUTORIZADOR, 
          t1.ESTATUSVALE, 
          t1.ORIGEN, 
          t1.CAUSACAMBIOVALE, 
          t1.LISTA, 
          t1.BLINDAJE, 
          t1.CLAVENAGS, 
          t1.MONTOCONVENIO, 
          t2.TIEMPOENTREGA, 
          /* TIEMPOENTREGA1 */
            (INTCK('DTWEEKDAY1W',t1.FECHAEXPEDICION,t1.FECENTREGAREFACCIONARIA)
            ) AS TIEMPOENTREGA1, 
          /* TIEMPORECEPCION */
            (INTCK('DTWEEKDAY1W',t1.FECHAEXPEDICION,t1.FECRECEPCION)
            ) AS TIEMPORECEPCION
      FROM WORK.APPEND_TABLE t1
           LEFT JOIN WORK.TE t2 ON (t1.IDEXPEDIENTE = t2.IDEXPEDIENTE) AND (t1.CODPROVEEDOR = t2.CODPROVEEDOR) AND 
          (t1.NUMPARTE = t2.NUMPARTE) AND (t1.REFERENCIA = t2.REFERENCIA) AND (t1.DESCRIPCIONREFACCION = 
          t2.DESCRIPCIONREFACCION);
QUIT;

/* se hace el cruce entre APPEND_TABLE_TE y ENVIOHISTORICO_CN_ANALISTACDR por IDEXPEDIENTE */
proc sql;
create table union_01 as
select a.*, b.*
from APPEND_TABLE_TE as a
left join ENVIOHISTORICO_CN_ANALISTACDR as b
on a.IDEXPEDIENTE=b.IDEXPEDIENTE;
QUIT;

/* se crean columnas */
PROC SQL;
CREATE TABLE WORK.QUERY_FOR_TLP AS
SELECT *,
/* PIEZAENTREGADA */
(ifn(t1.fecentregarefaccionaria^=.,1,0)) as PIEZAENTREGADA,
 /* MESEXPEDICION */
(MONTH(DATEPART(T1.FECHAEXPEDICION))) AS MESEXPEDICION,
/* ANIO_EXPEDICION */
(YEAR(DATEPART(T1.FECHAEXPEDICION))) AS ANIO_EXPEDICION,
/* LLAVEPIEZA */
(catt(T1.idexpediente,trim(referencia),trim(numparte),trim(descripcionrefaccion))) AS LLAVEPIEZA,
/* TIPOASIGNACION1 */
(CASE
WHEN t1.USUARIO = 'AUT' THEN 'AUTOMATICO'
WHEN t1.USUARIO CONTAINS 'AUT /' THEN 'MANUAL CON ALERTA'
WHEN UPCASE(t1.USUARIO) CONTAINS 'ADMINREFC' OR t1.USUARIO CONTAINS 'KAGONZALEZ' OR t1.USUARIO CONTAINS 'PERUIZ' OR t1.USUARIO CONTAINS 'PRUIZ' OR t1.USUARIO CONTAINS 'KGONZALEZ' OR UPCASE(t1.USUARIO) LIKE 'ASR_COMP%' OR UPCASE(t1.USUARIO) OR UPCASE(t1.USUARIO) CONTAINS 'EDSANCHEZ' OR UPCASE(t1.USUARIO) CONTAINS 'JOVAZQUEZ' OR UPCASE(t1.USUARIO) IN ('CORCOMSEG1',
'CORCOMSEG10',
'CORCOMSEG11',
'CORCOMSEG13',
'CORCOMSEG15',
'CORCOMSEG30',
'CORCOMSEG31',
'CORCOMSEG32',
'CORCOMSEG33',
'CORCOMSEG34',
'CORCOMSEG42',
'CORCOMSEG45',
'CORCOMSEG160',
'CORCOMSEG2',
'CORCOMSEG3',
'CORCOMSEG4',
'CORCOMSEG5',
'CORCOMSEG6',
'CORCOMSEG7',
'CORCOMSEG8',
'CORCOMSEG9',
'CORCOMSEG12',
'CORCOMSEG14',
'CORCOMSEG16',
'CORCOMSEG17',
'CORCOMSEG18',
'CORCOMSEG19',
'CORCOMSEG20',
'CORCOMSEG21',
'CORCOMSEG22',
'CORCOMSEG23',
'CORCOMSEG24',
'CORCOMSEG25',
'CORCOMSEG26',
'CORCOMSEG27',
'CORCOMSEG28',
'CORCOMSEG29',
'CORCOMSEG35',
'CORCOMSEG36',
'CORCOMSEG37',
'CORCOMSEG38',
'CORCOMSEG39',
'CORCOMSEG40',
'CORCOMSEG114',
'CORCOMSEG43',
'CORCOMSEG150',
'CORCOMSEG151',
'EDSANCHEZ',
'CORCOMSEG46')
  THEN 'MANUAL COMPRAS'
WHEN UPCASE(t1.USUARIO) LIKE 'ASR%' OR UPCASE(t1.USUARIO) CONTAINS 'SUPSEG' OR UPCASE(t1.USUARIO) LIKE 'SV_____%' OR UPCASE(t1.USUARIO) CONTAINS 'OTOLEDO' OR ( UPCASE(t1.USUARIO) LIKE 'CORCOMSEG%' AND UPCASE(t1.USUARIO) NOT IN ('CORCOMSEG10',
'CORCOMSEG11',
'CORCOMSEG13',
'CORCOMSEG15',
'CORCOMSEG30',
'CORCOMSEG31',
'CORCOMSEG32',
'CORCOMSEG33',
'CORCOMSEG34',
'CORCOMSEG42',
'CORCOMSEG45',
'CORCOMSEG160',
'CORCOMSEG2',
'CORCOMSEG3',
'CORCOMSEG4',
'CORCOMSEG5',
'CORCOMSEG6',
'CORCOMSEG7',
'CORCOMSEG8',
'CORCOMSEG9',
'CORCOMSEG12',
'CORCOMSEG14',
'CORCOMSEG16',
'CORCOMSEG17',
'CORCOMSEG18',
'CORCOMSEG19',
'CORCOMSEG20',
'CORCOMSEG21',
'CORCOMSEG22',
'CORCOMSEG23',
'CORCOMSEG24',
'CORCOMSEG25',
'CORCOMSEG26',
'CORCOMSEG27',
'CORCOMSEG28',
'CORCOMSEG29',
'CORCOMSEG35',
'CORCOMSEG36',
'CORCOMSEG37',
'CORCOMSEG38',
'CORCOMSEG39',
'CORCOMSEG40',
'CORCOMSEG114',
'CORCOMSEG43',
'CORCOMSEG150',
'CORCOMSEG151',
'EDSANCHEZ',
'CORCOMSEG46')) THEN 'MANUAL SEGUIMIENTO'
WHEN prxmatch('/^\d{5}$/', STRIP(t1.USUARIO)) THEN 'DIRECTA'
WHEN t1.USUARIO CONTAINS 'Valuador' or t1.USUARIO is missing then
CASE WHEN T1.CODPROVEEDOR = '81111' THEN 'DIRECTA 81111' ELSE 'DIRECTA' END
ELSE 'SIN ASIGNACION'
END) AS TIPOASIGNACION1,
/* AREAASIGNACION */
(CASE WHEN T1.USUARIO = 'AUT' THEN 'COTIZADOR'
WHEN UPCASE(t1.USUARIO) CONTAINS 'ADMINREFC' OR t1.USUARIO CONTAINS 'KAGONZALEZ' OR t1.USUARIO CONTAINS 'PERUIZ' OR t1.USUARIO CONTAINS 'PRUIZ' OR t1.USUARIO CONTAINS 'KGONZALEZ' OR UPCASE(t1.USUARIO) LIKE 'ASR_COMP%' OR UPCASE(t1.USUARIO) OR UPCASE(t1.USUARIO) CONTAINS 'EDSANCHEZ' OR UPCASE(t1.USUARIO) CONTAINS 'JOVAZQUEZ' OR UPCASE(t1.USUARIO) IN ('CORCOMSEG1',
'CORCOMSEG10',
'CORCOMSEG11',
'CORCOMSEG13',
'CORCOMSEG15',
'CORCOMSEG30',
'CORCOMSEG31',
'CORCOMSEG32',
'CORCOMSEG33',
'CORCOMSEG34',
'CORCOMSEG42',
'CORCOMSEG45',
'CORCOMSEG160',
'CORCOMSEG2',
'CORCOMSEG3',
'CORCOMSEG4',
'CORCOMSEG5',
'CORCOMSEG6',
'CORCOMSEG7',
'CORCOMSEG8',
'CORCOMSEG9',
'CORCOMSEG12',
'CORCOMSEG14',
'CORCOMSEG16',
'CORCOMSEG17',
'CORCOMSEG18',
'CORCOMSEG19',
'CORCOMSEG20',
'CORCOMSEG21',
'CORCOMSEG22',
'CORCOMSEG23',
'CORCOMSEG24',
'CORCOMSEG25',
'CORCOMSEG26',
'CORCOMSEG27',
'CORCOMSEG28',
'CORCOMSEG29',
'CORCOMSEG35',
'CORCOMSEG36',
'CORCOMSEG37',
'CORCOMSEG38',
'CORCOMSEG39',
'CORCOMSEG40',
'CORCOMSEG114',
'CORCOMSEG43',
'CORCOMSEG150',
'CORCOMSEG151',
'EDSANCHEZ',
'CORCOMSEG46') THEN 'COMPRAS'
WHEN UPCASE(t1.USUARIO) LIKE 'ASR%' OR UPCASE(t1.USUARIO) CONTAINS 'SUPSEG' OR UPCASE(t1.USUARIO) LIKE 'SV_____%' OR UPCASE(t1.USUARIO) CONTAINS 'OTOLEDO' OR ( UPCASE(t1.USUARIO) LIKE 'CORCOMSEG%' AND UPCASE(t1.USUARIO) NOT IN ('CORCOMSEG10',
'CORCOMSEG11',
'CORCOMSEG13',
'CORCOMSEG15',
'CORCOMSEG30',
'CORCOMSEG31',
'CORCOMSEG32',
'CORCOMSEG33',
'CORCOMSEG34',
'CORCOMSEG42',
'CORCOMSEG45',
'CORCOMSEG160',
'CORCOMSEG2',
'CORCOMSEG3',
'CORCOMSEG4',
'CORCOMSEG5',
'CORCOMSEG6',
'CORCOMSEG7',
'CORCOMSEG8',
'CORCOMSEG9',
'CORCOMSEG12',
'CORCOMSEG14',
'CORCOMSEG16',
'CORCOMSEG17',
'CORCOMSEG18',
'CORCOMSEG19',
'CORCOMSEG20',
'CORCOMSEG21',
'CORCOMSEG22',
'CORCOMSEG23',
'CORCOMSEG24',
'CORCOMSEG25',
'CORCOMSEG26',
'CORCOMSEG27',
'CORCOMSEG28',
'CORCOMSEG29',
'CORCOMSEG35',
'CORCOMSEG36',
'CORCOMSEG37',
'CORCOMSEG38',
'CORCOMSEG39',
'CORCOMSEG40',
'CORCOMSEG114',
'CORCOMSEG43',
'CORCOMSEG150',
'CORCOMSEG151',
'EDSANCHEZ',
'CORCOMSEG46')) THEN 'SEGUIMIENTO'
WHEN T1.USUARIO CONTAINS 'Valuador' OR prxmatch('/^\d{5}$/', STRIP(t1.USUARIO))>=1 OR T1.USUARIO IS MISSING THEN 'VALUACIÓN'  
ELSE ''
END) AS AREAASIGNACION,
/* AUTOMATICO */
(IFN(T1.USUARIO = 'AUT',1,0)) AS AUTOMATICO,
/* MANUAL CON ALERTA */
(IFN(T1.USUARIO CONTAINS 'AUT /',1,0)) AS 'MANUAL CON ALERTA'n,
/* MANUAL COMPRAS */
(IFN(UPCASE(t1.USUARIO) CONTAINS 'ADMINREFC' OR t1.USUARIO CONTAINS 'KAGONZALEZ' OR t1.USUARIO CONTAINS 'PERUIZ' OR t1.USUARIO CONTAINS 'PRUIZ' OR t1.USUARIO CONTAINS 'KGONZALEZ' OR UPCASE(t1.USUARIO) LIKE 'ASR_COMP%' OR UPCASE(t1.USUARIO) IN ('CORCOMSEG1',
'CORCOMSEG10',
'CORCOMSEG11',
'CORCOMSEG13',
'CORCOMSEG15',
'CORCOMSEG30',
'CORCOMSEG31',
'CORCOMSEG32',
'CORCOMSEG33',
'CORCOMSEG34',
'CORCOMSEG42',
'CORCOMSEG45',
'CORCOMSEG160',
'CORCOMSEG2',
'CORCOMSEG3',
'CORCOMSEG4',
'CORCOMSEG5',
'CORCOMSEG6',
'CORCOMSEG7',
'CORCOMSEG8',
'CORCOMSEG9',
'CORCOMSEG12',
'CORCOMSEG14',
'CORCOMSEG16',
'CORCOMSEG17',
'CORCOMSEG18',
'CORCOMSEG19',
'CORCOMSEG20',
'CORCOMSEG21',
'CORCOMSEG22',
'CORCOMSEG23',
'CORCOMSEG24',
'CORCOMSEG25',
'CORCOMSEG26',
'CORCOMSEG27',
'CORCOMSEG28',
'CORCOMSEG29',
'CORCOMSEG35',
'CORCOMSEG36',
'CORCOMSEG37',
'CORCOMSEG38',
'CORCOMSEG39',
'CORCOMSEG40',
'CORCOMSEG114',
'CORCOMSEG43',
'CORCOMSEG150',
'CORCOMSEG151',
'EDSANCHEZ',
'CORCOMSEG46'),1,0)) AS 'MANUAL COMPRAS'n,
/* MANUAL SEGUIMIENTO */
(IFN((UPCASE(t1.USUARIO) LIKE 'ASR%' AND NOT UPCASE(t1.USUARIO) LIKE 'ASR_COMP%') OR UPCASE(t1.USUARIO) CONTAINS 'SUPSEG' OR UPCASE(t1.USUARIO) LIKE 'SV_____%' OR UPCASE(t1.USUARIO) CONTAINS 'OTOLEDO' OR ( UPCASE(t1.USUARIO) LIKE 'CORCOMSEG%' AND UPCASE(t1.USUARIO) NOT IN ('CORCOMSEG10',
'CORCOMSEG11',
'CORCOMSEG13',
'CORCOMSEG15',
'CORCOMSEG30',
'CORCOMSEG31',
'CORCOMSEG32',
'CORCOMSEG33',
'CORCOMSEG34',
'CORCOMSEG42',
'CORCOMSEG45',
'CORCOMSEG160',
'CORCOMSEG2',
'CORCOMSEG3',
'CORCOMSEG4',
'CORCOMSEG5',
'CORCOMSEG6',
'CORCOMSEG7',
'CORCOMSEG8',
'CORCOMSEG9',
'CORCOMSEG12',
'CORCOMSEG14',
'CORCOMSEG16',
'CORCOMSEG17',
'CORCOMSEG18',
'CORCOMSEG19',
'CORCOMSEG20',
'CORCOMSEG21',
'CORCOMSEG22',
'CORCOMSEG23',
'CORCOMSEG24',
'CORCOMSEG25',
'CORCOMSEG26',
'CORCOMSEG27',
'CORCOMSEG28',
'CORCOMSEG29',
'CORCOMSEG35',
'CORCOMSEG36',
'CORCOMSEG37',
'CORCOMSEG38',
'CORCOMSEG39',
'CORCOMSEG40',
'CORCOMSEG114',
'CORCOMSEG43',
'CORCOMSEG150',
'CORCOMSEG151',
'EDSANCHEZ',
'CORCOMSEG46')),1,0)) AS 'MANUAL SEGUIMIENTO'n,
/* DIRECTA */
(IFN(UPCASE(t1.USUARIO) CONTAINS 'VALUADOR' or t1.USUARIO is missing OR prxmatch('/^\d{5}$/', STRIP(t1.USUARIO))>=1,1,0)) AS DIRECTA,
/* PIEZAAUTOSURTIDO */
(IFN(T1.CODPROVEEDOR = T1.CLAVETALLER,1,0)) AS PIEZAAUTOSURTIDO
FROM WORK.UNION_01 as T1;
QUIT;

/* Se crea la tabla de TODASLASPIEZAS en la libreria de INDBASE haciendo un left join entre
	QUERY_FOR_TLP y CONVENB.USUARIOHOMOLOGADO por USUARIO y FECVALUACION >= '1Jan2024:0:0:0'dt*/
PROC SQL;
   CREATE TABLE INDBASE.TODASLASPIEZAS AS 
   SELECT t1.IDEXPEDIENTE, 
          t1.EJERCICIO, 
          t1.NUMREPORTE, 
          t1.NUMSINIESTRO, 
          t1.ESTATUSEXPEDIENTE, 
          t1.ESTATUSVALUACION, 
          t1.MARCAVEHICULO, 
          t1.TIPOVEHICULO, 
          t1.MODELO, 
          t1.SERIE, 
          t1.CLAVETALLER, 
          t1.NOMBRECDR, 
          t1.TIPOCDR_PORTAL, 
          t1.IDREGIONGEOGRAFICA, 
          t1.CDRCOTIZADOR, 
          t1.CDRAUTOSURTIDO, 
          t1.ANALISTACDR, 
          t1.GERENCIAVALUACION, 
          t1.CERCO, 
          t1.CERCO_ANTERIOR, 
          t1.CODVALUADOR, 
          t1.FECVALUACION, 
          t1.FECTERMINADO, 
          t1.FECENTREGADO, 
          t1.VEHICULOTERMINADO, 
          t1.IDVALEHISTORICO, 
          t1.IDVALE, 
          t1.CODPROVEEDOR, 
          t1.NOMBREPROVEEDOR, 
          t1.TIPOPROVEEDOR_PORTAL, 
          t1.TIPOTOT, 
          t1.FOLIO, 
          t1.FECHAEXPEDICION, 
          t1.FECHAACTUALIZACION, 
          t1.ESTATUSVALE, 
          t1.USUARIO, 
          /* USUARIOHOMOLOGADO */
            (case 
            when t1.usuario = t2.usuariobase then t2.usuariohomologado
            when t1.usuario is missing or t1.usuario contains 'Valuador' then substr(t1.usuario,10,5)
            when t1.USUARIO = 'AUT'   THEN "AUTOMATICO"
            when t1.USUARIO contains 'AUT / ADMINREFC' then substr(t1.usuario,1,17)
            when t1.USUARIO contains 'AUT / Adminrefc' then substr(t1.usuario,1,17)
            when t1.USUARIO contains 'AUT / adminep' then substr(t1.usuario,1,17)
            when t1.USUARIO contains 'ADMINEP08' then "EDUARDO LOPEZ"
            when t1.USUARIO contains 'AUT / adminrefc18' then "AUT/NADIA YADIRA RAMIREZ"
            when t1.USUARIO contains 'AUT / adminrefc23' then "AUT/ULISES PEREZ"
            when t1.USUARIO= 'AUT / ASR4' then "AUT/ARGENIS URIEL REYES ADAME"
            when t1.USUARIO= 'AUT / ASR3_14' then "AUT/ADRIANA NAVARRO"
            when t1.USUARIO= 'AUT / ASR9_2' then "AUT/MARTINEZ CORANADO BLANCA"
            when t1.USUARIO= 'AUT / ASR5' then "AUT/OSCAR OMAR HERRERA BECERRIL"
            when t1.USUARIO= 'AUT / ASR3_6' then "AUT/FELIX ESCOBAR"
            when t1.USUARIO contains 'supsegq' then  t1.USUARIO
            when t1.USUARIO contains 'AUT / ASR' then substr(t1.usuario,1,17)
            when t1.USUARIO contains 'AUT / ASR_COMP' then substr(t1.usuario,1,17)
            when t1.USUARIO contains 'AUT / asr_comp' then substr(t1.usuario,1,17)
            
            ELSE " "
            
            END) AS USUARIOHOMOLOGADO, 
          t1.CAUSACAMBIOVALE, 
          t1.AUTORIZADOR, 
          t1.NUMPARTE, 
          t1.REFERENCIA, 
          t1.DESCRIPCIONREFACCION, 
          t1.LISTA, 
          t1.CLAVENAGS, 
          t1.BLINDAJE, 
          t1.MONTO, 
          t1.ORIGEN, 
          t1.IDCOSTO, 
          t1.TIPO AS TIPOCOSTO,
          t1.FECENVIO, 
          t1.FECENTREGAREFACCIONARIA, 
          t1.FECRECEPCION, 
          t1.FECPROMESAENTREGA, 
          t1.PIEZAENTREGADA, 
          t1.TIEMPOENTREGA, 
          t1.TIEMPORECEPCION, 
          t1.ANIO_EXPEDICION, 
          t1.MESEXPEDICION, 
          t1.LLAVEPIEZA, 
          t1.TIPOASIGNACION1, 
          t1.AUTOMATICO, 
          t1.'MANUAL CON ALERTA'n, 
          t1.'MANUAL COMPRAS'n, 
          t1.'MANUAL SEGUIMIENTO'n, 
          t1.DIRECTA, 
          t1.AREAASIGNACION, 
          t1.PIEZAAUTOSURTIDO, 
          t1.MONTOCONVENIO
      FROM WORK.QUERY_FOR_TLP t1
      LEFT JOIN CONVENB.USUARIOHOMOLOGADO t2 ON (t1.USUARIO = t2.UsuarioBase)
      WHERE t1.FECVALUACION >= '1Jan2024:0:0:0'dt;
QUIT;
